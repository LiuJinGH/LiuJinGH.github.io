<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[runtime中objc_getAssociatedObject、objc_setAssociatedObject的使用说明]]></title>
      <url>https://liujingh.github.io/2016/10/25/iOS%E5%BC%80%E5%8F%91/iOS%E9%AB%98%E7%BA%A7%E5%BC%80%E5%8F%91/runtime%E4%B8%ADobjc_getAssociatedObject%E3%80%81objc_setAssociatedObject%E7%9A%84%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</url>
      <content type="html"><![CDATA[<h1 id="方法简介"><a href="#方法简介" class="headerlink" title="方法简介"></a>方法简介</h1><p>objc_getAssociatedObject、objc_setAssociatedObject是runtime机制中对类库进行动态操作属性的两个方法。</p>
<h2 id="objc-getAssociatedObject"><a href="#objc-getAssociatedObject" class="headerlink" title="objc_getAssociatedObject"></a>objc_getAssociatedObject</h2><h3 id="官方定义"><a href="#官方定义" class="headerlink" title="官方定义"></a>官方定义</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function">OBJC_EXPORT id <span class="title">objc_getAssociatedObject</span>(<span class="params">id <span class="keyword">object</span>, <span class="keyword">const</span> <span class="keyword">void</span> *key</span>)</span></div><div class="line">    __<span class="title">OSX_AVAILABLE_STARTING</span>(<span class="params">__MAC_10_6, __IPHONE_3_1</span>);</div></pre></td></tr></table></figure>
<h3 id="官方注解"><a href="#官方注解" class="headerlink" title="官方注解"></a>官方注解</h3><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">/** </div><div class="line"> * Returns the value associated <span class="keyword">with</span> a given <span class="built_in">object</span> <span class="keyword">for</span> a given <span class="keyword">key</span>.</div><div class="line"> * </div><div class="line"> * @param <span class="built_in">object</span> The source <span class="built_in">object</span> <span class="keyword">for</span> the association.</div><div class="line"> * @param <span class="keyword">key</span> The <span class="keyword">key</span> <span class="keyword">for</span> the association.</div><div class="line"> * </div><div class="line"> * @<span class="keyword">return</span> The value associated <span class="keyword">with</span> the <span class="keyword">key</span> \e <span class="keyword">key</span> <span class="keyword">for</span> \e <span class="built_in">object</span>.</div><div class="line"> * </div><div class="line"> * @see objc_setAssociatedObject</div><div class="line"> */</div></pre></td></tr></table></figure>
<h3 id="个人注解"><a href="#个人注解" class="headerlink" title="个人注解"></a>个人注解</h3><ul>
<li>objc_getAssociatedObject方法是获取动态类库属性的一个方法。</li>
<li>参数：object 是指明要获取的属性是来自哪个实例对象</li>
<li>参数：key 是用来标识该属性</li>
<li>函数返回参数中对应对象的对应属性</li>
</ul>
<h2 id="objc-setAssociatedObject"><a href="#objc-setAssociatedObject" class="headerlink" title="objc_setAssociatedObject"></a>objc_setAssociatedObject</h2><h3 id="官方定义-1"><a href="#官方定义-1" class="headerlink" title="官方定义"></a>官方定义</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function">OBJC_EXPORT <span class="keyword">void</span> <span class="title">objc_setAssociatedObject</span>(<span class="params">id <span class="keyword">object</span>, <span class="keyword">const</span> <span class="keyword">void</span> *key, id <span class="keyword">value</span>, objc_AssociationPolicy policy</span>)</span></div><div class="line">    __<span class="title">OSX_AVAILABLE_STARTING</span>(<span class="params">__MAC_10_6, __IPHONE_3_1</span>);</div></pre></td></tr></table></figure>
<h3 id="官方注解-1"><a href="#官方注解-1" class="headerlink" title="官方注解"></a>官方注解</h3><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">/** </div><div class="line"> * Sets an associated value <span class="keyword">for</span> a given <span class="built_in">object</span> <span class="keyword">using</span> a given <span class="keyword">key</span> <span class="keyword">and</span> association policy.</div><div class="line"> * </div><div class="line"> * @param <span class="built_in">object</span> The source <span class="built_in">object</span> <span class="keyword">for</span> the association.</div><div class="line"> * @param <span class="keyword">key</span> The <span class="keyword">key</span> <span class="keyword">for</span> the association.</div><div class="line"> * @param value The value <span class="keyword">to</span> associate <span class="keyword">with</span> the <span class="keyword">key</span> <span class="keyword">key</span> <span class="keyword">for</span> <span class="built_in">object</span>. Pass nil <span class="keyword">to</span> clear an existing association.</div><div class="line"> * @param policy The policy <span class="keyword">for</span> the association. <span class="keyword">For</span> possible values, see “Associative <span class="built_in">Object</span> Behaviors.”</div><div class="line"> * </div><div class="line"> * @see objc_setAssociatedObject</div><div class="line"> * @see objc_removeAssociatedObjects</div><div class="line"> */</div></pre></td></tr></table></figure>
<h3 id="个人注解-1"><a href="#个人注解-1" class="headerlink" title="个人注解"></a>个人注解</h3><ul>
<li>objc_setAssociatedObject方法是动态设置类库中属性的一个方法。</li>
<li>参数：object 指明要动态设置属性实例对象</li>
<li>参数：key 为该属性设置一个标识</li>
<li>参数：value 设置设个属性的值</li>
<li>参数：policy 设置该属性的关联策略</li>
</ul>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">typedef OBJC_ENUM(uintptr_t, objc_AssociationPolicy) &#123;</div><div class="line"><span class="comment">/**&lt; Specifies a weak reference to the associated object. */</span></div><div class="line">    <span class="comment">//弱引用 weak</span></div><div class="line">    OBJC_ASSOCIATION_ASSIGN = <span class="number">0</span>,  </div><div class="line">    </div><div class="line"><span class="comment">/**&lt; Specifies a strong reference to the associated object.     *   The association is not made atomically. */</span></div><div class="line">    <span class="comment">//强引用，非原子性 strong nonatomic</span></div><div class="line">    OBJC_ASSOCIATION_RETAIN_NONATOMIC = <span class="number">1</span>, </div><div class="line">    </div><div class="line"><span class="comment">/**&lt; Specifies that the associated object is copied.     *   The association is not made atomically. */</span></div><div class="line">    <span class="comment">//拷贝，非原子性 copy nonatomic</span></div><div class="line">    OBJC_ASSOCIATION_COPY_NONATOMIC = <span class="number">3</span>, </div><div class="line">    </div><div class="line"><span class="comment">/**&lt; Specifies a strong reference to the associated object.    *   The association is made atomically. */</span></div><div class="line">    <span class="comment">//强引用，原子性 strong atomic</span></div><div class="line">    OBJC_ASSOCIATION_RETAIN = <span class="number">01401</span>,  </div><div class="line">    </div><div class="line"><span class="comment">/**&lt; Specifies that the associated object is copied.    *   The association is made atomically. */</span></div><div class="line">    <span class="comment">//拷贝，原子性 copy atomic</span></div><div class="line">    OBJC_ASSOCIATION_COPY = <span class="number">01403</span>          </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h1 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h1><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>在使用未开源的源码时，往往会使用分类来增加原始类的方法。但是，在分类中不能定义成员变量，这也导致无法给原始类增加成员变量。解决这个问题的其中一个方法就是使用runtime的objc_getAssociatedObject和objc_setAssociatedObject来为原始类的实例对象动态增加一个属性。</p>
<p><a href="http://note.youdao.com/noteshare?id=fe39374f234a0cdb718f23f2bb575d62" target="_blank" rel="external">源码连接_有道云笔记</a></p>
<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p>新建一个NSString类型的分类</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在.h文件中</span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="comment">//需要导入的头文件</span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSString</span> (<span class="title">LJ_runtime_Demo</span>)</span></div><div class="line"><span class="comment">//定义了一个属性，当实现了它的getter和setter方法</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *ljDemo;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在.m文件中</span></div><div class="line"><span class="meta">#import <span class="meta-string">"NSString+LJ_runtime_Demo.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSString</span> (<span class="title">LJ_runtime_Demo</span>)</span></div><div class="line"></div><div class="line">-(<span class="built_in">NSString</span> *)ljDemo&#123;</div><div class="line">    <span class="keyword">return</span> objc_getAssociatedObject(<span class="keyword">self</span>, <span class="string">@"LJDEMO"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(<span class="keyword">void</span>)setLjDemo:(<span class="built_in">NSString</span> *)ljDemo&#123;</div><div class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, <span class="string">@"LJDEMO"</span>, ljDemo, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在main函数中</span></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</div><div class="line">    <span class="keyword">@autoreleasepool</span> &#123;</div><div class="line">        <span class="built_in">NSString</span> *str = <span class="string">@"这是测试Demo"</span>;</div><div class="line">        str.ljDemo = <span class="string">@"您好，美丽的世界"</span>;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, str.ljDemo);</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">//</span>打印测试</div><div class="line"><span class="number">2016</span>-<span class="number">10</span>-<span class="number">25</span> <span class="number">11</span>:<span class="number">33</span>:<span class="number">07.100</span> LJ_runtime_AssociatedObject_Demo[<span class="number">3571</span>:<span class="number">113511</span>] 您好，美丽的世界</div><div class="line">Program ended with <span class="keyword">exit</span> code: <span class="number">0</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[WMPageController]]></title>
      <url>https://liujingh.github.io/2016/10/24/iOS%E5%BC%80%E5%8F%91/Demo/WMPageController/</url>
      <content type="html"><![CDATA[<h1 id="WMPageController简介"><a href="#WMPageController简介" class="headerlink" title="WMPageController简介"></a>WMPageController简介</h1><p>上方切换栏效果的控制器</p>
<p><a href="https://github.com/wangmchn/WMPageController" target="_blank" rel="external">WMPageControllerHithub链接</a></p>
<p><img src="http://note.youdao.com/yws/api/personal/file/WEB47e983d7db17742d006d6b0121973a7f?method=download&amp;inline=true&amp;shareKey=2f27af2463eeb1dfde7d353249ebfccc" alt="Demo图片"></p>
<h1 id="WMPageController使用说明"><a href="#WMPageController使用说明" class="headerlink" title="WMPageController使用说明"></a>WMPageController使用说明</h1><h2 id="使用注意点"><a href="#使用注意点" class="headerlink" title="使用注意点"></a>使用注意点</h2><ul>
<li><p>WMPageController是国人写的一个第三方，固然有中文注释。所以有关属性和方法的说明，可以直接到源码中看注释即可。</p>
</li>
<li><p>WMPageController的部分属性配置不能在viewDidLoad方法中设置，只能在其之前，比如：初始化方法或loadView方法</p>
</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//目前发现这三个属性符合以上说明</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> showOnNavigationBar;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) WMMenuViewStyle menuViewStyle;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIColor</span> *menuBGColor;</div></pre></td></tr></table></figure>
<ul>
<li>WMPageController对子层ViewController有缓存机制，如果子蹭ViewController是第一次加载，会调用以下方法，否则不会再次调用。</li>
</ul>
<figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- <span class="params">(__kindof UIViewController *)</span>pageController:<span class="params">(WMPageController *)</span>pageController viewControllerAtIndex:<span class="params">(NSInteger)</span>index;</div></pre></td></tr></table></figure>
<ul>
<li>WMPageController在viewDidAppear方法中设置了标题栏的一些动画操作。</li>
</ul>
<p>使用步骤</p>
<ul>
<li>需要新建一个类，继承WMPageController</li>
<li>设置标题栏的一些属性</li>
<li>实现相关父类方法</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSArray</span>&lt;<span class="built_in">NSString</span> *&gt; *titles;</div><div class="line"></div><div class="line">- (<span class="built_in">NSInteger</span>)numbersOfChildControllersInPageController:(WMPageController *)pageController;</div><div class="line"></div><div class="line">- (__kindof <span class="built_in">UIViewController</span> *)pageController:(WMPageController *)pageController viewControllerAtIndex:(<span class="built_in">NSInteger</span>)index;</div></pre></td></tr></table></figure>
<p><a href="http://note.youdao.com/noteshare?id=e406af192ace47dbca3828ff5638e684" target="_blank" rel="external">Demo下载_有道云笔记</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[UIViewController生命周期]]></title>
      <url>https://liujingh.github.io/2016/10/21/iOS%E5%BC%80%E5%8F%91/UIKit/UIViewController/UIViewController%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      <content type="html"><![CDATA[<h1 id="UIViewController生命周期简介"><a href="#UIViewController生命周期简介" class="headerlink" title="UIViewController生命周期简介"></a>UIViewController生命周期简介</h1><p>UIViewController作为UIView的管理容器，当UIView处于不同的阶段的时候，会发出不同的消息。图示如下：</p>
<p><img src="http://note.youdao.com/yws/api/personal/file/WEBdb9680cdf946c2e4cd72cfa684c162c3?method=download&amp;inline=true&amp;shareKey=570245f7c5544c082e7df997db3a425c" alt="image"></p>
<h1 id="UIViewController生命周期方法介绍"><a href="#UIViewController生命周期方法介绍" class="headerlink" title="UIViewController生命周期方法介绍"></a>UIViewController生命周期方法介绍</h1><h2 id="loadView"><a href="#loadView" class="headerlink" title="loadView"></a>loadView</h2><h3 id="方法定义"><a href="#方法定义" class="headerlink" title="方法定义"></a>方法定义</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Swift</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">loadView</span><span class="params">()</span></span></div><div class="line"><span class="comment">//OC</span></div><div class="line">- (void)loadView</div></pre></td></tr></table></figure>
<h3 id="官方释义"><a href="#官方释义" class="headerlink" title="官方释义"></a>官方释义</h3><blockquote>
<p>You should never call this method directly. The view controller calls this method when its view property is requested but is currently nil. This method loads or creates a view and assigns it to the view property.</p>
<p>If the view controller has an associated nib file, this method loads the view from the nib file. A view controller has an associated nib file if the nibName property returns a non-nil value, which occurs if the view controller was instantiated from a storyboard, if you explicitly assigned it a nib file using the initWithNibName:bundle: method, or if iOS finds a nib file in the app bundle with a name based on the view controller’s class name. If the view controller does not have an associated nib file, this method creates a plain UIView object instead.</p>
<p>If you use Interface Builder to create your views and initialize the view controller, you must not override this method.</p>
<p>You can override this method in order to create your views manually. If you choose to do so, assign the root view of your view hierarchy to the view property. The views you create should be unique instances and should not be shared with any other view controller object. Your custom implementation of this method should not call super.</p>
<p>If you want to perform any additional initialization of your views, do so in the viewDidLoad method.</p>
</blockquote>
<h3 id="方法注解"><a href="#方法注解" class="headerlink" title="方法注解"></a>方法注解</h3><ul>
<li>苹果官方不建议我们直接调用这个函数。当UIViewController发现需要使用到view属性但它又是nil的时候，就会调用这个方法来加载或创建一个UIView对象赋值给这个属性。</li>
<li>如果你使用的是图形界面的方式初始化UIViewController和创建view，那么禁止重写这个方法。</li>
<li>当我们想要自定义自己的view层级时，可以重写这个方法，并将这个视图层级的根视图赋值给view属性。需要注意的二点：其一，需要保证这个视图层级是唯一的；其二，重写方法不应该重调super的方法。</li>
<li>如果我们想要展示一些额外的视图实例，可以在viewDidLoad中实现。</li>
</ul>
<h2 id="viewDidLoad"><a href="#viewDidLoad" class="headerlink" title="viewDidLoad"></a>viewDidLoad</h2><h3 id="方法定义-1"><a href="#方法定义-1" class="headerlink" title="方法定义"></a>方法定义</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Swift</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span></div><div class="line"><span class="comment">//OC</span></div><div class="line">- (void)viewDidLoad</div></pre></td></tr></table></figure>
<h3 id="官方释义-1"><a href="#官方释义-1" class="headerlink" title="官方释义"></a>官方释义</h3><blockquote>
<p>This method is called after the view controller has loaded its view hierarchy into memory. This method is called regardless of whether the view hierarchy was loaded from a nib file or created programmatically in the loadView method. You usually override this method to perform additional initialization on views that were loaded from nib files.</p>
</blockquote>
<h3 id="方法注解-1"><a href="#方法注解-1" class="headerlink" title="方法注解"></a>方法注解</h3><ul>
<li>当ViewController已经将它的视图层级加载在内存当中时，这个方法就会被调用。这个方法经常使用来对视图层级添加一些额外设置的。</li>
<li>一般来说，ViewController的loadView、viewDidLoad方法只会在ViewController的生命周期中调用一次。如果主动将ViewController的view置为nil，且又在其它生命周期方法使用到view的getter方法，那么会导致ViewController重新调用laodView、viewDidLoad方法,引发死循环或其它莫名其妙的问题，而且这类问题很可能不会有提示。</li>
</ul>
<h2 id="viewWillAppear"><a href="#viewWillAppear" class="headerlink" title="viewWillAppear"></a>viewWillAppear</h2><h3 id="方法定义-2"><a href="#方法定义-2" class="headerlink" title="方法定义"></a>方法定义</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Swift</span></div><div class="line"><span class="selector-tag">func</span> <span class="selector-tag">viewWillAppear</span>(_ <span class="attribute">animated</span>: Bool)</div><div class="line"><span class="comment">//OC</span></div><div class="line"><span class="selector-tag">-</span> (void)<span class="selector-tag">viewWillAppear</span><span class="selector-pseudo">:(BOOL)animated</span></div></pre></td></tr></table></figure>
<h3 id="官方释义-2"><a href="#官方释义-2" class="headerlink" title="官方释义"></a>官方释义</h3><blockquote>
<p>This method is called before the view controller’s view is about to be added to a view hierarchy and before any animations are configured for showing the view. You can override this method to perform custom tasks associated with displaying the view. For example, you might use this method to change the orientation or style of the status bar to coordinate with the orientation or style of the view being presented. If you override this method, you must call super at some point in your implementation.</p>
<p>If a view controller is presented by a view controller inside of a popover, this method is not invoked on the presenting view controller after the presented controller is dismissed.</p>
</blockquote>
<h3 id="方法注解-2"><a href="#方法注解-2" class="headerlink" title="方法注解"></a>方法注解</h3><ul>
<li>这个方法在ViewController的View视图层级将要做出显示且在显示动画之前调用，重写这个方法可以操作一些与View视图层级显示相关的任务。如果你重写这个方法，你必须要实现它的父类方法</li>
<li>如果一个视图控制器被另一个视图控制器以内嵌popover的方式呈现，那么这个呈现视图的viewWillAppear方法不会在被呈现的视图控制器退出之后调用</li>
</ul>
<h2 id="viewDidAppear"><a href="#viewDidAppear" class="headerlink" title="viewDidAppear"></a>viewDidAppear</h2><h3 id="方法定义-3"><a href="#方法定义-3" class="headerlink" title="方法定义"></a>方法定义</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Swift</span></div><div class="line"><span class="selector-tag">func</span> <span class="selector-tag">viewDidAppear</span>(_ <span class="attribute">animated</span>: Bool)</div><div class="line"><span class="comment">//OC</span></div><div class="line"><span class="selector-tag">-</span> (void)<span class="selector-tag">viewDidAppear</span><span class="selector-pseudo">:(BOOL)animated</span></div></pre></td></tr></table></figure>
<h3 id="官方释义-3"><a href="#官方释义-3" class="headerlink" title="官方释义"></a>官方释义</h3><blockquote>
<p>You can override this method to perform additional tasks associated with presenting the view. If you override this method, you must call super at some point in your implementation.</p>
</blockquote>
<h3 id="方法注解-3"><a href="#方法注解-3" class="headerlink" title="方法注解"></a>方法注解</h3><ul>
<li>当ViewController已经的视图层级已经显示之后调用这个方法，重写这个方法必须要实现它的父类方法。</li>
</ul>
<h2 id="viewWillDisappear"><a href="#viewWillDisappear" class="headerlink" title="viewWillDisappear"></a>viewWillDisappear</h2><h3 id="方法定义-4"><a href="#方法定义-4" class="headerlink" title="方法定义"></a>方法定义</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Swift</span></div><div class="line"><span class="selector-tag">func</span> <span class="selector-tag">viewWillDisappear</span>(_ <span class="attribute">animated</span>: Bool)</div><div class="line"><span class="comment">//OC</span></div><div class="line"><span class="selector-tag">-</span> (void)<span class="selector-tag">viewWillDisappear</span><span class="selector-pseudo">:(BOOL)animated</span></div></pre></td></tr></table></figure>
<h3 id="官方释义-4"><a href="#官方释义-4" class="headerlink" title="官方释义"></a>官方释义</h3><blockquote>
<p>This method is called in response to a view being removed from a view hierarchy. This method is called before the view is actually removed and before any animations are configured.</p>
<p>Subclasses can override this method and use it to commit editing changes, resign the first responder status of the view, or perform other relevant tasks. For example, you might use this method to revert changes to the orientation or style of the status bar that were made in the viewDidDisappear: method when the view was first presented. If you override this method, you must call super at some point in your implementation</p>
</blockquote>
<h3 id="方法注解-4"><a href="#方法注解-4" class="headerlink" title="方法注解"></a>方法注解</h3><h2 id="viewDidDisappear"><a href="#viewDidDisappear" class="headerlink" title="viewDidDisappear"></a>viewDidDisappear</h2><h3 id="方法定义-5"><a href="#方法定义-5" class="headerlink" title="方法定义"></a>方法定义</h3><ul>
<li>当ViewController的view已经从视图层级上移除且还没配置动画之前调用这个方法。</li>
<li>重写这个方法一般是用来处理view移除后的一些事物，如注销第一响应者状态等。</li>
<li>重写这个方法必须实现它的父类方法。</li>
</ul>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Swift</span></div><div class="line"><span class="selector-tag">func</span> <span class="selector-tag">viewDidDisappear</span>(_ <span class="attribute">animated</span>: Bool)</div><div class="line"><span class="comment">//OC</span></div><div class="line"><span class="selector-tag">-</span> (void)<span class="selector-tag">viewDidDisappear</span><span class="selector-pseudo">:(BOOL)animated</span></div></pre></td></tr></table></figure>
<h3 id="官方释义-5"><a href="#官方释义-5" class="headerlink" title="官方释义"></a>官方释义</h3><blockquote>
<p>You can override this method to perform additional tasks associated with dismissing or hiding the view. If you override this method, you must call super at some point in your implementation.</p>
</blockquote>
<h3 id="方法注解-5"><a href="#方法注解-5" class="headerlink" title="方法注解"></a>方法注解</h3><ul>
<li>当ViewController的view从屏幕上消失时，调用这个方法。</li>
<li>重写这个方法必须实现它的父类方法。</li>
</ul>
<h2 id="嵌套VC调用顺序"><a href="#嵌套VC调用顺序" class="headerlink" title="嵌套VC调用顺序"></a>嵌套VC调用顺序</h2><p><img src="http://note.youdao.com/yws/api/personal/file/WEBb65920b48628e51d95a0056c0517e02e?method=download&amp;inline=true&amp;shareKey=51048903bba58394e6cd9a5b386c6b28" alt="image"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS地图]]></title>
      <url>https://liujingh.github.io/2016/10/19/iOS%E5%BC%80%E5%8F%91/%E5%85%B6%E4%BB%96/iOS%E5%9C%B0%E5%9B%BE/</url>
      <content type="html"><![CDATA[<h1 id="iOS地图简介"><a href="#iOS地图简介" class="headerlink" title="iOS地图简介"></a>iOS地图简介</h1><p>苹果一般使用的谷歌、高德地图。但在大天朝谷歌地图用不了，所以一般使用高德地图。</p>
<p>有关iOS 高德地图的一些API介绍</p>
<blockquote>
<p>MapKit.framework 使用高德地图时，需要导入MapKit框架。</p>
<p>MKMapView 地图视图，在iOS中其父类继承的是UIView，在MacOS中其父类继承的是NSView。其主要功能是将地图以视图形式显示出来</p>
<p>CLGeocoder 地理编码器，其主要功能是将地理位置转化为经纬度，或将经纬度转化为地理位置。</p>
<p>CLPlacemark 地标，存储了指定经纬度的地标信息，诸如国家，城市，街道等。</p>
<p>CLLocationManager 定位管理器，用于设置地图中的定位服务。</p>
<p>CLLocation 位置，封装了以经纬度为基点的地理信息，与地标不同的是，它没有包含具体位置信息。</p>
<p>MKAnnotationView 位置注释视图，其主要功能为标记一个位置信息</p>
</blockquote>
<h1 id="iOS地图的使用"><a href="#iOS地图的使用" class="headerlink" title="iOS地图的使用"></a>iOS地图的使用</h1><h2 id="向工程中导入MapKit框架"><a href="#向工程中导入MapKit框架" class="headerlink" title="向工程中导入MapKit框架"></a>向工程中导入MapKit框架</h2><h3 id="进入工程配置文件"><a href="#进入工程配置文件" class="headerlink" title="进入工程配置文件"></a>进入工程配置文件</h3><p><img src="http://note.youdao.com/yws/api/personal/file/WEBd7fd48be47c6cfe1e7131e70f05f36b2?method=download&amp;inline=true&amp;shareKey=b534bbad14aa37dcc2e85a3de5c6d2e8" alt="image"></p>
<h3 id="选择添加工程框架"><a href="#选择添加工程框架" class="headerlink" title="选择添加工程框架"></a>选择添加工程框架</h3><p><img src="http://note.youdao.com/yws/api/personal/file/WEBca73cda57994c8ee2daeee4e141721f4?method=download&amp;inline=true&amp;shareKey=42c38260f8e71c26dee817e663c43899" alt="image"></p>
<h3 id="添加MapKit框架"><a href="#添加MapKit框架" class="headerlink" title="添加MapKit框架"></a>添加MapKit框架</h3><p><img src="http://note.youdao.com/yws/api/personal/file/WEBd59a4ec036264234f5d9ce5ee9d7db67?method=download&amp;inline=true&amp;shareKey=086694a2881d3af13d255deb3bfbf28e" alt="image"></p>
<h3 id="添加成功显示"><a href="#添加成功显示" class="headerlink" title="添加成功显示"></a>添加成功显示</h3><p><img src="http://note.youdao.com/yws/api/personal/file/WEB296d384b6f083443a0b67b42265cec49?method=download&amp;inline=true&amp;shareKey=339772dccc66f99d2c81977393c8adcf" alt="image"></p>
<h2 id="使用MKMapView显示地图"><a href="#使用MKMapView显示地图" class="headerlink" title="使用MKMapView显示地图"></a>使用MKMapView显示地图</h2><h3 id="导入相关包"><a href="#导入相关包" class="headerlink" title="导入相关包"></a>导入相关包</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@<span class="meta"><span class="meta-keyword">import</span> MapKit;</span>  <span class="comment">//显示地图</span></div><div class="line">@<span class="meta"><span class="meta-keyword">import</span> CoreLocation;</span>  <span class="comment">// 地位服务</span></div></pre></td></tr></table></figure>
<h3 id="使用MKMapView显示地图-1"><a href="#使用MKMapView显示地图-1" class="headerlink" title="使用MKMapView显示地图"></a>使用MKMapView显示地图</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@interface</span> ViewController ()</div><div class="line"><span class="comment">//定义一个MKMapView属性</span></div><div class="line"><span class="variable">@property</span> (nonatomic) MKMapView *mapView;</div><div class="line"><span class="variable">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    </div><div class="line">    _mapView = [[<span class="built_in">MKMapView</span> alloc] initWithFrame:[<span class="built_in">UIScreen</span> mainScreen].bounds];</div><div class="line">    _mapView.mapType = <span class="built_in">MKMapTypeStandard</span>;</div><div class="line">    [<span class="keyword">self</span>.view addSubview:_mapView];</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="mapType的选择"><a href="#mapType的选择" class="headerlink" title="mapType的选择"></a>mapType的选择</h3><p>在MKMapView中，mapType属性决定了地图显示的样式。在苹果官方定义中有如下</p>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">typedef <span class="type">NS_ENUM</span>(<span class="type">NSUInteger</span>, <span class="type">MKMapType</span>) &#123;</div><div class="line">    <span class="type">MKMapTypeStandard</span> = 0,</div><div class="line">    <span class="type">MKMapTypeSatellite</span>,</div><div class="line">    <span class="type">MKMapTypeHybrid</span>,</div><div class="line">    <span class="type">MKMapTypeSatelliteFlyover</span>,</div><div class="line">    <span class="type">MKMapTypeHybridFlyover</span>,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="MKMapTypeStandard样式"><a href="#MKMapTypeStandard样式" class="headerlink" title="MKMapTypeStandard样式"></a>MKMapTypeStandard样式</h4><p>标准地图</p>
<p><img src="http://note.youdao.com/yws/api/personal/file/WEB2aa39d24b6777b3f2167784a406162f8?method=download&amp;inline=true&amp;shareKey=bffe54bbcd3310f7daa8c5802ba7ce1f" alt="image"></p>
<h4 id="MKMapTypeSatellite样式"><a href="#MKMapTypeSatellite样式" class="headerlink" title="MKMapTypeSatellite样式"></a>MKMapTypeSatellite样式</h4><p>卫星地图（这个没有位置标识，几乎看不懂）</p>
<p><img src="http://note.youdao.com/yws/api/personal/file/WEB7d3db7b13c6f2b36156d474663f6306a?method=download&amp;inline=true&amp;shareKey=9b278e8ca811e5b6f18d856bdd5111c0" alt="image"></p>
<h4 id="MKMapTypeHybrid样式"><a href="#MKMapTypeHybrid样式" class="headerlink" title="MKMapTypeHybrid样式"></a>MKMapTypeHybrid样式</h4><p>混合地图 （在卫星地图上添加了位置标识）</p>
<p><img src="http://note.youdao.com/yws/api/personal/file/WEB9ef1676cefcbab9b0abfb4abdb6b99cc?method=download&amp;inline=true&amp;shareKey=4a5e582d5f8cbbfafb8641c931329ed6" alt="image"></p>
<h2 id="使用CLLocationManager定位服务"><a href="#使用CLLocationManager定位服务" class="headerlink" title="使用CLLocationManager定位服务"></a>使用CLLocationManager定位服务</h2><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//定义一个属性</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">CLLocationManager</span> *mgr;</div><div class="line"></div><div class="line"><span class="comment">//在viewDidLoad中实现</span></div><div class="line"></div><div class="line">_mapView.showsUserLocation = <span class="literal">YES</span>;</div><div class="line"></div><div class="line">_mgr = [<span class="built_in">CLLocationManager</span> new];</div><div class="line"><span class="comment">//任何时候都定位  前台+后台</span></div><div class="line">[_mgr requestAlwaysAuthorization];</div><div class="line"><span class="comment">//只有在前台的时候才定位</span></div><div class="line">[_mgr requestWhenInUseAuthorization];</div><div class="line"><span class="comment">//以上两个定位方式依需选择，定位服务是非常耗电的！</span></div></pre></td></tr></table></figure>
<p>在info.plist中添加信息</p>
<blockquote>
<p>NSLocationAlwaysUsageDescription 值：申请使用定位服务</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/api/personal/file/WEBa9c537e91a16d01ef2f5c82533fb623a?method=download&amp;inline=true&amp;shareKey=bb28e86a98d4257eedd75ce586563ed6" alt="image"></p>
<p>打开模拟器，会提示授权定位服务</p>
<p><img src="http://note.youdao.com/yws/api/personal/file/WEBd189bfb18df62b8f3642ccd6b1a2ff4e?method=download&amp;inline=true&amp;shareKey=0a1f6e15a505f3ec169fba52b967a2bf" alt="image"></p>
<p>点击允许之后，要使用模拟器给定一个模拟位置。</p>
<p><img src="http://note.youdao.com/yws/api/personal/file/WEB3b2d20bbcba871c0d2b8524edcbcdbef?method=download&amp;inline=true&amp;shareKey=3f9908818e9c5b7e5c13f7f3b5d27730" alt="image"></p>
<p>输入模拟位置的经纬度</p>
<p><img src="http://note.youdao.com/yws/api/personal/file/WEBfa9bd6e089d22125e980ce1c98fe1068?method=download&amp;inline=true&amp;shareKey=6f98e49b411e0ab693482af85c9fd6e2" alt="image"></p>
<p>至此，地图在模拟器上出现定位的标识点</p>
<p><img src="http://note.youdao.com/yws/api/personal/file/WEB30ab53e8f7bb9c8dcfc454b0f316a6f5?method=download&amp;inline=true&amp;shareKey=8df6541b23385445e340ebdf633e24fd" alt="image"></p>
<h2 id="使用代理方法以拉近定位点的显示"><a href="#使用代理方法以拉近定位点的显示" class="headerlink" title="使用代理方法以拉近定位点的显示"></a>使用代理方法以拉近定位点的显示</h2><p>代理方法</p>
<blockquote>
<p>MKMapViewDelegate</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/api/personal/file/WEB7a4728c0e01c807794503b3741aa579b?method=download&amp;inline=true&amp;shareKey=495546f4f28173df93984fa9a1018c8d" alt="image"></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//找到.m文件顶部，添加MKMapViewDelegate</span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()&lt;<span class="title">MKMapViewDelegate</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">//在viewDidLoad中实现</span></div><div class="line"><span class="comment">//设置代理</span></div><div class="line">_mapView.delegate = <span class="keyword">self</span>;</div><div class="line"></div><div class="line"><span class="comment">//实现代理方法</span></div><div class="line">-(<span class="keyword">void</span>)mapView:(<span class="built_in">MKMapView</span> *)mapView didUpdateUserLocation:(<span class="built_in">MKUserLocation</span> *)userLocation&#123;</div><div class="line">    </div><div class="line">    <span class="comment">//控制地图显示的区域</span></div><div class="line">    <span class="built_in">MKCoordinateSpan</span> span = <span class="built_in">MKCoordinateSpanMake</span>(<span class="number">.01</span>, <span class="number">.01</span>);</div><div class="line">    <span class="built_in">MKCoordinateRegion</span> region = <span class="built_in">MKCoordinateRegionMake</span>(userLocation.location.coordinate, span);</div><div class="line">    [_mapView setRegion:region animated:<span class="literal">YES</span>];</div><div class="line">    </div><div class="line">    <span class="comment">//关闭定位服务</span></div><div class="line">    [_mgr stopUpdatingLocation];</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>MKCoordinateRegion 表示地图上的一块区域，center表示以经纬度表示的区域中心点，span表示这块区域的大小</p>
</blockquote>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</div><div class="line">	<span class="built_in">CLLocationCoordinate2D</span> center;</div><div class="line">	<span class="built_in">MKCoordinateSpan</span> span;</div><div class="line">&#125; <span class="built_in">MKCoordinateRegion</span>;</div></pre></td></tr></table></figure>
<blockquote>
<p>MKCoordinateSpan 它有两个字段一个是latitudeDelta，表示纬度范围，南纬和北纬加一起应该有180度，所以它的范围应该是大于0度，小于等于180度；另一个是longitudeDelta，表示经度范围，东经和西经加一起应该有360度，所以它的范围应该是大于0度，小于360度。</p>
</blockquote>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</div><div class="line">    <span class="built_in">CLLocationDegrees</span> latitudeDelta;</div><div class="line">    <span class="built_in">CLLocationDegrees</span> longitudeDelta;</div><div class="line">&#125; <span class="built_in">MKCoordinateSpan</span>;</div></pre></td></tr></table></figure>
<h2 id="扩展1：拾取坐标器"><a href="#扩展1：拾取坐标器" class="headerlink" title="扩展1：拾取坐标器"></a>扩展1：拾取坐标器</h2><ul>
<li><p>每个地图系统经纬度对应的实际地理位置是不同的，有一定的差距。这据说是每个地图系统的算法不同导致的。</p>
</li>
<li><p><a href="http://api.map.baidu.com/lbsapi/getpoint/index.html" target="_blank" rel="external">百度坐标拾取器</a></p>
</li>
<li><p><a href="http://lbs.amap.com/console/show/picker" target="_blank" rel="external">高德坐标拾取器</a></p>
</li>
</ul>
<h2 id="扩展2：地理编码器"><a href="#扩展2：地理编码器" class="headerlink" title="扩展2：地理编码器"></a>扩展2：地理编码器</h2><h3 id="地理编码"><a href="#地理编码" class="headerlink" title="地理编码"></a>地理编码</h3><p>地理编码是指将地理位置转化为经纬度</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">CLGeocoder</span> *geo = [<span class="built_in">CLGeocoder</span> new];</div><div class="line">[geo geocodeAddressString:<span class="string">@"中国北京市朝阳区松榆北路建业"</span> completionHandler:^(<span class="built_in">NSArray</span>&lt;<span class="built_in">CLPlacemark</span> *&gt; * _Nullable placemarks, <span class="built_in">NSError</span> * _Nullable error) &#123;</div><div class="line">        </div><div class="line">    <span class="built_in">CLPlacemark</span> *place = placemarks.firstObject;</div><div class="line">    <span class="built_in">CLLocation</span> *location = place.location;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, location);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<blockquote>
<p>&lt;+39.87614400,+116.47236900&gt; +/- 100.00m (speed -1.00 mps / course -1.00)</p>
</blockquote>
<h3 id="地理反编码"><a href="#地理反编码" class="headerlink" title="地理反编码"></a>地理反编码</h3><p>地理反编码是指将经纬度转化为地理位置</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">CLLocation</span> *location = [[<span class="built_in">CLLocation</span> alloc] initWithLatitude:<span class="number">39.9368</span> longitude:<span class="number">116.453119</span>];</div><div class="line">[[<span class="built_in">CLGeocoder</span> new] reverseGeocodeLocation:location completionHandler:^(<span class="built_in">NSArray</span>&lt;<span class="built_in">CLPlacemark</span> *&gt; * _Nullable placemarks, <span class="built_in">NSError</span> * _Nullable error) &#123;</div><div class="line">    <span class="built_in">CLPlacemark</span> *place = placemarks.firstObject;</div><div class="line">    <span class="built_in">NSDictionary</span> *dic = place.addressDictionary;</div><div class="line">    <span class="built_in">CLLocation</span> *location = place.location;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, location);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>由于控制台输出会乱码，这里用断点来查看</p>
<p><img src="http://note.youdao.com/yws/api/personal/file/WEB4ce1e04aa35e0a009ccf64bf08aef0dd?method=download&amp;inline=true&amp;shareKey=b8b42493bdaa4132e216b86fac8e736d" alt="image"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS毛玻璃效果]]></title>
      <url>https://liujingh.github.io/2016/10/13/iOS%E5%BC%80%E5%8F%91/Demo/iOS%E6%AF%9B%E7%8E%BB%E7%92%83%E6%95%88%E6%9E%9C/</url>
      <content type="html"><![CDATA[<h1 id="iOS毛玻璃效果"><a href="#iOS毛玻璃效果" class="headerlink" title="iOS毛玻璃效果"></a>iOS毛玻璃效果</h1><p>这个Demo实现了iOS编程中的毛玻璃效果。</p>
<blockquote>
<p><a href="https://github.com/LiuJinGH/LJiOSForstedGlassDemo" target="_blank" rel="external">Github下载Demo</a></p>
<p><a href="http://note.youdao.com/noteshare?id=9dd868287e7a10af3668625d7f791a6e" target="_blank" rel="external">有道云下载Demo</a></p>
</blockquote>
<p><img src="http://note.youdao.com/yws/api/personal/file/WEB0103d8a0f2e902c4183967cb2e2c07b5?method=download&amp;inline=true&amp;shareKey=dc69bc34e7952405f78963fbc61a3617" alt="iOS毛玻璃效果"></p>
<h1 id="实现方法简介"><a href="#实现方法简介" class="headerlink" title="实现方法简介"></a>实现方法简介</h1><h2 id="iOS8-及以后版本"><a href="#iOS8-及以后版本" class="headerlink" title="iOS8 及以后版本"></a>iOS8 及以后版本</h2><p>在iOS8中，添加了毛玻璃效果的API，可以直接拿来使用。</p>
<p>承载毛玻璃效果的View</p>
<blockquote>
<p>UIVisualEffectView</p>
</blockquote>
<p>毛玻璃效果</p>
<blockquote>
<p>UIBlurEffect</p>
</blockquote>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//代码示例</span></div><div class="line"><span class="built_in">UIImageView</span> *iv = [<span class="built_in">UIImageView</span> new];</div><div class="line">[<span class="keyword">self</span>.view addSubview:iv];</div><div class="line">[iv mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">make.edges.equalTo(<span class="built_in">UIEdgeInsetsMake</span>(<span class="number">64</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</div><div class="line">&#125;];</div><div class="line"></div><div class="line">iv.image = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"pic2.jpg"</span>];</div><div class="line"></div><div class="line"><span class="built_in">UIBlurEffect</span> *blur = [<span class="built_in">UIBlurEffect</span> effectWithStyle:<span class="built_in">UIBlurEffectStyleDark</span>];</div><div class="line"><span class="built_in">UIVisualEffectView</span> *effectView = [[<span class="built_in">UIVisualEffectView</span> alloc] initWithEffect:blur];</div><div class="line">[iv addSubview:effectView];</div><div class="line">[effectView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">make.edges.equalTo(<span class="number">0</span>);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h2 id="iOS7-及之前版本"><a href="#iOS7-及之前版本" class="headerlink" title="iOS7 及之前版本"></a>iOS7 及之前版本</h2><p>在iOS7及之前的版本是没有上面用到的这两个API的。但在系统内部实际上已经有类似的API实现了，比如在导航栏和工具栏就已经实现了毛玻璃效果。这时，为了实现毛玻璃的效果，可以用到一个取巧的方法：将一个UIToolbar当成一个UIVisualEffectView贴上去</p>
<blockquote>
<p>UIToolbar</p>
</blockquote>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//代码示例</span></div><div class="line">UIToolbar *<span class="built_in">bar</span> = [[UIToolbar alloc] init];</div><div class="line">[iv addSubview:<span class="built_in">bar</span>];</div><div class="line">[<span class="built_in">bar</span> mas_makeConstraints:^(MASConstraintMaker *<span class="built_in">make</span>) &#123;</div><div class="line"><span class="built_in">make</span>.edges.equalTo(<span class="number">0</span>);</div><div class="line">&#125;];</div><div class="line">[<span class="built_in">bar</span> setBarStyle:UIBarStyleBlack];</div><div class="line"><span class="built_in">bar</span>.translatesAutoresizingMaskIntoConstraints = NO;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mac配置Apache和PHP]]></title>
      <url>https://liujingh.github.io/2016/10/11/Mac%E5%90%84%E7%A7%8D%E9%85%8D%E7%BD%AE/Mac%E9%85%8D%E7%BD%AEApache%E5%92%8CPHP/</url>
      <content type="html"><![CDATA[<h1 id="Mac-Apache启动与相关配置"><a href="#Mac-Apache启动与相关配置" class="headerlink" title="Mac Apache启动与相关配置"></a>Mac Apache启动与相关配置</h1><p>在Mac OS 系统中已经默认安装了Apache服务器！</p>
<h2 id="启动Apache"><a href="#启动Apache" class="headerlink" title="启动Apache"></a>启动Apache</h2><p>关于Apahce的一些操作命名 （其中一些可能需要使用sudo来提高权限）<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Apache版本</span></div><div class="line">$ apachectl -v</div><div class="line"><span class="built_in">Server</span> version: Apache/<span class="number">2.4</span><span class="number">.23</span> (Unix)</div><div class="line"><span class="built_in">Server</span> built:   Aug  <span class="number">8</span> <span class="number">2016</span> <span class="number">16</span>:<span class="number">31</span>:<span class="number">34</span></div><div class="line"></div><div class="line"><span class="comment">//启动Apache 可能需要管理员密码</span></div><div class="line">sudo apachectl star</div></pre></td></tr></table></figure></p>
<p>验证Apache是否启动</p>
<p>在浏览器地址栏中输入 </p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">http:</span><span class="comment">//localhost</span></div></pre></td></tr></table></figure>
<p>如果出现 “It works!” 界面说明启动成功</p>
<h2 id="配置Apache"><a href="#配置Apache" class="headerlink" title="配置Apache"></a>配置Apache</h2><p>Apache的安装目录在：/etc/apache2/<br>Apache的默认根目录: /Library（资源库）/WebServer/Documents/</p>
<h3 id="设置Apache虚拟主机"><a href="#设置Apache虚拟主机" class="headerlink" title="设置Apache虚拟主机"></a>设置Apache虚拟主机</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#cd</span> 到Apache安装目录</div><div class="line">$ cd /etc/apache2/</div><div class="line"></div><div class="line">#需要修改到httpd.conf文件，最好先将其拷贝一份</div><div class="line"></div><div class="line">#备份httpd<span class="selector-class">.conf</span></div><div class="line"><span class="variable">$sudo</span> cp httpd<span class="selector-class">.conf</span> httpd<span class="selector-class">.conf</span><span class="selector-class">.copy</span></div><div class="line"></div><div class="line">#开始配置</div><div class="line"><span class="variable">$sudo</span> vim httpd.conf</div></pre></td></tr></table></figure>
<p>找到“#Include /private/etc/apache2/extra/httpd-vhosts.conf” 将前面的#号去掉，在Vim中，在命令界面下可以使用“/”来搜索</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Virtual hosts</span></div><div class="line">Include <span class="regexp">/private/</span>etc<span class="regexp">/apache2/</span>extra<span class="regexp">/httpd-vhosts.conf</span></div></pre></td></tr></table></figure>
<p>重启Apache来启动配置 开启虚拟主机配置功能</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#重启Apache </span></div><div class="line">$sudo apachectl restart</div></pre></td></tr></table></figure>
<p>虚拟主机文件路径：/etc/apache2/extra/httpd-vhosts.conf</p>
<p>配置虚拟主机文件<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#同样，备份之前保存原件</span></div><div class="line">$sudo cp httpd-vhosts.conf httpd-vhosts.conf.bak</div><div class="line"></div><div class="line">$sudo vim <span class="meta-keyword">/etc/</span>apache2<span class="meta-keyword">/extra/</span>httpd-vhosts.conf</div><div class="line"></div><div class="line"><span class="meta">#删掉以前的，增加如下的</span></div><div class="line"><span class="meta">#这个是系统层级的，不要随意改动</span></div><div class="line"><span class="params">&lt;VirtualHost *:<span class="number">80</span>&gt;</span></div><div class="line">    DocumentRoot <span class="string">"/Library/WebServer/Documents"</span></div><div class="line">    ServerName localhost</div><div class="line">    ErrorLog <span class="string">"/private/var/log/apache2/localhost-error_log"</span></div><div class="line">    CustomLog <span class="string">"/private/var/log/apache2/localhost-access_log"</span> common</div><div class="line"><span class="params">&lt;/VirtualHost&gt;</span></div><div class="line"></div><div class="line"><span class="meta">#这个是自己的，要根据自己的需求配置</span></div><div class="line"><span class="meta">#DocumentRoot是自己的站点的根目录</span></div><div class="line"><span class="meta">#ServerName 是自己站点的名称</span></div><div class="line"><span class="params">&lt;VirtualHost *:<span class="number">80</span>&gt;</span></div><div class="line">    DocumentRoot <span class="string">"/Users/liujin/Sites"</span></div><div class="line">    ServerName www.ljsites.com</div><div class="line">    ErrorLog <span class="string">"/private/var/log/apache2/sites-error_log"</span></div><div class="line">    CustomLog <span class="string">"/private/var/log/apache2/sites-access_log"</span> common</div><div class="line">    <span class="params">&lt;Directory /&gt;</span></div><div class="line">                Options Indexes FollowSymLinks MultiViews</div><div class="line">                AllowOverride None</div><div class="line">                Order deny,allow</div><div class="line">                Allow from all</div><div class="line">      <span class="params">&lt;/Directory&gt;</span></div><div class="line"><span class="params">&lt;/VirtualHost&gt;</span></div></pre></td></tr></table></figure></p>
<p>修改hosts配置文件</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#增加一条</div><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span>       <span class="selector-tag">www</span><span class="selector-class">.ljsites</span><span class="selector-class">.com</span></div></pre></td></tr></table></figure>
<p>还需要打开Apache的默认权限</p>
<figure class="highlight apache"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="section">&lt;Directory /&gt;</span></div><div class="line"><span class="comment">#    AllowOverride none</span></div><div class="line"><span class="comment">#    Require all denied</span></div><div class="line">    <span class="attribute"><span class="nomarkup">Options</span></span> Indexes FollowSymLinks</div><div class="line">    <span class="attribute">AllowOverride</span> None</div><div class="line"><span class="section">&lt;/Directory&gt;</span></div></pre></td></tr></table></figure>
<p>重启Apache<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">sudo apachectl restart</span></div></pre></td></tr></table></figure></p>
<h2 id="配置PHP"><a href="#配置PHP" class="headerlink" title="配置PHP"></a>配置PHP</h2><p>如果你上面都做成功了，那么开启PHP也就简单多了。</p>
<p>Mac中已经默认安装了PHP了，在Apache中配置就好了</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">vim</span> httpd.<span class="keyword">conf</span></div><div class="line"></div><div class="line">#将这句话的注释打开</div><div class="line">LoadModule php5_module libexec/apache2/libphp5.<span class="keyword">so</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CGContext]]></title>
      <url>https://liujingh.github.io/2016/10/08/iOS%E5%BC%80%E5%8F%91/Context/</url>
      <content type="html"><![CDATA[<h2 id="简单示例——画一条线"><a href="#简单示例——画一条线" class="headerlink" title="简单示例——画一条线"></a>简单示例——画一条线</h2><p><img src="http://note.youdao.com/yws/api/personal/file/WEB98f9bd9c1e545e1b3b345371fe47e67c?method=download&amp;shareKey=852a99b9ff5d8ce0eaaa60b8a4b17b3c" alt="image"></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取当前图形上下文</span></div><div class="line"><span class="built_in">CGContextRef</span> ctx = <span class="built_in">UIGraphicsGetCurrentContext</span>();</div><div class="line"><span class="comment">//将画笔的起点移动到（100，100）</span></div><div class="line"><span class="built_in">CGContextMoveToPoint</span>(ctx, <span class="number">100</span>, <span class="number">100</span>);</div><div class="line"><span class="comment">//画一条线，起点为(100，100) 终点（200，100）</span></div><div class="line"><span class="built_in">CGContextAddLineToPoint</span>(ctx, <span class="number">200</span>, <span class="number">100</span>);</div><div class="line"><span class="comment">//设置画笔的宽度</span></div><div class="line"><span class="built_in">CGContextSetLineWidth</span>(ctx, <span class="number">5.0</span>f);</div><div class="line"><span class="comment">//设置画笔的颜色</span></div><div class="line"><span class="built_in">CGContextSetStrokeColorWithColor</span>(ctx, [<span class="built_in">UIColor</span> redColor].CGColor);</div><div class="line"><span class="comment">//让画笔在图形上下文中画画</span></div><div class="line"><span class="built_in">CGContextStrokePath</span>(ctx);</div></pre></td></tr></table></figure>
<h2 id="简单示例二——画一个正方形"><a href="#简单示例二——画一个正方形" class="headerlink" title="简单示例二——画一个正方形"></a>简单示例二——画一个正方形</h2><p><img src="http://note.youdao.com/yws/api/personal/file/WEB336971125b5f99eea6e2880e53150055?method=download&amp;shareKey=02532a25231bd37d7aa273e411cb7828" alt="image"></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取当前图形上下文</span></div><div class="line"><span class="built_in">CGContextRef</span> ctx = <span class="built_in">UIGraphicsGetCurrentContext</span>();</div><div class="line"><span class="comment">//将画笔的起点移动到（100，100）</span></div><div class="line"><span class="built_in">CGContextMoveToPoint</span>(ctx, <span class="number">100</span>, <span class="number">100</span>);</div><div class="line"><span class="comment">//画一条线，起点为(100，100) 终点（200，100）</span></div><div class="line"><span class="built_in">CGContextAddLineToPoint</span>(ctx, <span class="number">200</span>, <span class="number">100</span>);</div><div class="line"><span class="built_in">CGContextAddLineToPoint</span>(ctx, <span class="number">200</span>, <span class="number">200</span>);</div><div class="line"><span class="built_in">CGContextAddLineToPoint</span>(ctx, <span class="number">100</span>, <span class="number">200</span>);</div><div class="line"><span class="built_in">CGContextAddLineToPoint</span>(ctx, <span class="number">100</span>, <span class="number">100</span>);</div><div class="line"><span class="comment">//设置画笔的宽度</span></div><div class="line"><span class="built_in">CGContextSetLineWidth</span>(ctx, <span class="number">5.0</span>f);</div><div class="line"><span class="comment">//将起点和终点闭合起来</span></div><div class="line"><span class="built_in">CGContextClosePath</span>(ctx);</div><div class="line"><span class="comment">//设置画笔的颜色</span></div><div class="line"><span class="built_in">CGContextSetStrokeColorWithColor</span>(ctx, [<span class="built_in">UIColor</span> redColor].CGColor);</div><div class="line"><span class="comment">//让画笔在图形上下文中画画</span></div><div class="line"><span class="built_in">CGContextStrokePath</span>(ctx);</div></pre></td></tr></table></figure>
<p><a href="http://note.youdao.com/yws/api/personal/file/WEB6400c8ffc27d0de4c21822bdeb5dcef2?method=download&amp;inline=true&amp;shareKey=a818d5ff398f55f4c6660024f0c0f541" target="_blank" rel="external">Demo下载</a></p>
<h2 id="使用Context绘图的步骤"><a href="#使用Context绘图的步骤" class="headerlink" title="使用Context绘图的步骤"></a>使用Context绘图的步骤</h2><ol>
<li>获取图形上下文：</li>
</ol>
<p>一般是获取当前图形上下文，也可以根据需要自行创建其它的<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">CGContextRef ctx</span> = UIGraphicsGetCurrentContext();</div></pre></td></tr></table></figure></p>
<ol>
<li>绘制图形：</li>
</ol>
<p>先设置绘制起点</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CGContextMoveToPoint(<span class="name">ctx</span>, <span class="number">100</span>, <span class="number">100</span>)<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>然后根据需要绘制图形</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CGContextAddLineToPoint(<span class="name">ctx</span>, <span class="number">200</span>, <span class="number">100</span>)<span class="comment">;</span></div></pre></td></tr></table></figure>
<ol>
<li>绘制参数配置：</li>
</ol>
<p>宽度：</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CGContextSetLineWidth(<span class="name">ctx</span>, <span class="number">5.0</span>f)<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>颜色：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">CGContextSetStrokeColorWithColor</span>(<span class="selector-tag">ctx</span>, <span class="selector-attr">[UIColor redColor]</span><span class="selector-class">.CGColor</span>);</div></pre></td></tr></table></figure>
<ol>
<li>将图形上下文绘制出来：</li>
</ol>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CGContextStrokePath(<span class="name">ctx</span>)<span class="comment">;</span></div></pre></td></tr></table></figure>
<h2 id="Context的几个注意点"><a href="#Context的几个注意点" class="headerlink" title="Context的几个注意点"></a>Context的几个注意点</h2><h3 id="为什么要使用起点移动函数？"><a href="#为什么要使用起点移动函数？" class="headerlink" title="为什么要使用起点移动函数？"></a><em>为什么要使用起点移动函数？</em></h3><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CGContextMoveToPoint(<span class="name">ctx</span>, <span class="number">100</span>, <span class="number">100</span>)<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>解释：因为很多Context的绘制函数是没有包含起点参数的，但是绘制图形又必须有一个起点：比如上面的绘制直线函数：CGContextAddLineToPoint(ctx, 200, 100)参数只是告诉终点位置是（200，100）。并没有起点参数。在图形上下文中会给出起点，起点有两种情况：</p>
<ol>
<li>使用CGContextMoveToPoint函数给出指定位置为起点</li>
<li>不指定位置情况下，默认使用上次绘图的终点为本次绘图的起点</li>
</ol>
<p>由此，第一次绘图的时候是没有上次绘图的终点，这时便要给出指定位置的起点。</p>
<h3 id="起点和终点怎么闭合？"><a href="#起点和终点怎么闭合？" class="headerlink" title="起点和终点怎么闭合？"></a><em>起点和终点怎么闭合？</em></h3><p>在使用绘线函数绘制闭合图形时，会出现起点和终点无法闭合的情况：</p>
<p><img src="http://note.youdao.com/yws/api/personal/file/WEB9ed95c4ae70749df58ad13519687b8ad?method=download&amp;shareKey=cfbc6cf2981002d82841ba2ea0db6834" alt="image"></p>
<p>使用函数解决<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//将起点和终点闭合起来</span></div><div class="line"><span class="selector-tag">CGContextClosePath</span>(ctx);</div></pre></td></tr></table></figure></p>
<h3 id="CGContextStrokePath和CGContextFillPath的区别"><a href="#CGContextStrokePath和CGContextFillPath的区别" class="headerlink" title="CGContextStrokePath和CGContextFillPath的区别"></a><em>CGContextStrokePath和CGContextFillPath的区别</em></h3><p>CGContextStrokePath是绘制边<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">CGContextSetStrokeColorWithColor(<span class="name">ctx</span>, [UIColor redColor].CGColor)<span class="comment">;</span></div><div class="line">CGContextStrokePath(<span class="name">ctx</span>)<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p>CGContextFillPath是填充</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[[<span class="name">UIColor</span> purpleColor] set]<span class="comment">;</span></div><div class="line">CGContextFillPath(<span class="name">ctx</span>)<span class="comment">;</span></div></pre></td></tr></table></figure>
<p><img src="http://note.youdao.com/yws/api/personal/file/WEBf64eb8644c1de99f47aa81f2a9ad7b25?method=download&amp;shareKey=612230f9050e5912511d9d8b1d64b1df" alt="image"></p>
<h2 id="Context其它绘制函数"><a href="#Context其它绘制函数" class="headerlink" title="Context其它绘制函数"></a>Context其它绘制函数</h2><p>画弧<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> <span class="built_in">CGContextAddArc</span>(<span class="built_in">CGContextRef</span> __<span class="keyword">nullable</span> c, <span class="built_in">CGFloat</span> x, <span class="built_in">CGFloat</span> y,</div><div class="line">    <span class="built_in">CGFloat</span> radius, <span class="built_in">CGFloat</span> startAngle, <span class="built_in">CGFloat</span> endAngle, <span class="keyword">int</span> clockwise)</div><div class="line"><span class="comment">//圆心（x,y）、半径 radius、开始角 startAngle、结束角 endStart、绘制方向 clockwise</span></div><div class="line"><span class="comment">//示例</span></div><div class="line"><span class="built_in">CGContextAddArc</span>(ctx, <span class="number">150</span>, <span class="number">150</span>, <span class="number">50</span>, <span class="number">0</span>, M_PI_4, <span class="literal">YES</span>);</div></pre></td></tr></table></figure></p>
<p><img src="http://note.youdao.com/yws/api/personal/file/WEB7dc2e677363b0ec649387293074f41d9?method=download&amp;shareKey=6979128287040dd3d1494c279a6df126" alt="image"></p>
<p>画矩形</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CGContextAddRect(ctx, CGRectMake(<span class="number">80</span>, <span class="number">80</span>, <span class="number">200</span>, <span class="number">100</span>));</div></pre></td></tr></table></figure>
<p><img src="http://note.youdao.com/yws/api/personal/file/WEB3ced639793970ff1fabcf787619cba53?method=download&amp;shareKey=051d2262078d81071b525ee64632d5af" alt="image"></p>
<p>画曲线</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CGContextAddCurveToPoint(ctx, <span class="number">200</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>);</div></pre></td></tr></table></figure>
<p><img src="http://note.youdao.com/yws/api/personal/file/WEB5589f48e553c0e08a4dcb36c18490b2e?method=download&amp;shareKey=fd355a40bc260311fdeb871363255ff1" alt="image"></p>
<p>画椭圆</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CGContextAddEllipseInRect(ctx, CGRectMake(<span class="number">100</span>, <span class="number">100</span>, <span class="number">300</span>, <span class="number">200</span>));</div></pre></td></tr></table></figure>
<p><img src="http://note.youdao.com/yws/api/personal/file/WEBd02445e7942598e9eb890106a3d04e07?method=download&amp;shareKey=f269636280541f08a799fd38cf981879" alt="image"></p>
<h2 id="Context参数配置函数"><a href="#Context参数配置函数" class="headerlink" title="Context参数配置函数"></a>Context参数配置函数</h2><p>设置线的端点为圆角<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CGContextSetLineCap(<span class="name">ctx</span>, kCGLineCapRound)<span class="comment">;</span></div></pre></td></tr></table></figure></p>
<p>设置线之间的交点为圆角</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CGContextSetLineJoin(<span class="name">ctx</span>, kCGLineJoinRound)<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>设置透明度</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CGContextSetAlpha(<span class="name">ctx</span>, <span class="number">0.3</span>)<span class="comment">;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CoreAnimation]]></title>
      <url>https://liujingh.github.io/2016/10/08/iOS%E5%BC%80%E5%8F%91/CoreAnimation/</url>
      <content type="html"><![CDATA[<h2 id="CoreAnimation简介"><a href="#CoreAnimation简介" class="headerlink" title="CoreAnimation简介"></a>CoreAnimation简介</h2><p><img src="http://note.youdao.com/yws/api/personal/file/WEB8521ccc00946f1c896f0409a634d8f51?method=download&amp;inline=true&amp;shareKey=aff35856ab2b65a189b12590ed8988ba" alt="image"></p>
<ol>
<li>能用的动画类只有4个子类：CABasicAnimation、CAKeyframeAnimation、CATransition、CAAnimationGroup</li>
<li>CAPropertyAnimation是CAAnimation的子类，但是不能直接使用，要想创建动画对象，应该使用它的两个子类：CABasicAnimation和CAKeyframeAnimation</li>
<li>CAMediaTiming是一个协议(protocol)</li>
</ol>
<p>它有个NSString类型的keyPath属性，你可以指定CALayer的某个属性名为keyPath，并且对CALayer的这个属性的值进行修改，达到相应的动画效果。比如，指定@”position”为keyPath，就会修改CALayer的position属性的值，以达到平移的动画效果</p>
<p><a href="http://note.youdao.com/yws/api/personal/file/WEB44832f6965de18b816f5755ac4f69e97?method=download&amp;inline=true&amp;shareKey=cd64b2da612ec487ed1b19372c79b1b1" target="_blank" rel="external">Demo下载</a></p>
<h3 id="属性解析：-标识代表来自CAMediaTiming协议的属性"><a href="#属性解析：-标识代表来自CAMediaTiming协议的属性" class="headerlink" title="属性解析：(标识代表来自CAMediaTiming协议的属性)"></a>属性解析：(标识代表来自CAMediaTiming协议的属性)</h3><blockquote>
<p>duration：动画的持续时间</p>
<p>repeatCount：动画的重复次数</p>
<p>repeatDuration：动画的重复时间</p>
<p>removedOnCompletion：默认为YES，代表动画执行完毕后就从图层上移除，图形会恢复到动画执行前的状态。如果想让图层保持显示动画执行后的状态，那就设置为NO，不过还要设置fillMode为kCAFillModeForwards</p>
<p>fillMode：决定当前对象在非active时间段的行为.比如动画开始之前,动画结束之后</p>
<p>beginTime：可以用来设置动画延迟执行时间，若想延迟2s，就设置为CACurrentMediaTime()+2，CACurrentMediaTime()为图层的当前时间</p>
<p>timingFunction：速度控制函数，控制动画运行的节奏</p>
<p>delegate：动画代理</p>
</blockquote>
<h3 id="Core-Animation的使用步骤"><a href="#Core-Animation的使用步骤" class="headerlink" title="Core Animation的使用步骤"></a>Core Animation的使用步骤</h3><ol>
<li>初始化一个CAAnimation对象，并设置一些动画相关属性</li>
<li>通过调用CALayer的addAnimation:forKey:方法增加CAAnimation对象到CALayer中，这样就能开始执行动画了</li>
<li>通过调用CALayer的removeAnimationForKey:方法可以停止CALayer中的动画</li>
</ol>
<h2 id="CABasicAnimation"><a href="#CABasicAnimation" class="headerlink" title="CABasicAnimation"></a>CABasicAnimation</h2><blockquote>
<p>fromValue：keyPath相应属性的初始值</p>
<p>toValue：keyPath相应属性的结束值</p>
<p>随着动画的进行，在长度为duration的持续时间内，keyPath相应属性的值从fromValue渐渐地变为toValue</p>
</blockquote>
<p>CABasicAnimation创建<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建一个基本动画类型</span></div><div class="line"><span class="built_in">CABasicAnimation</span> *animation = [<span class="built_in">CABasicAnimation</span> animationWithKeyPath:Key];</div><div class="line"><span class="comment">//动画持续时间</span></div><div class="line">animation.duration = <span class="number">2.0</span>;</div><div class="line"><span class="comment">//动画重复次数</span></div><div class="line">animation.repeatCount = MAXFLOAT;</div><div class="line"><span class="comment">//设置动画执行完毕之后不删除动画</span></div><div class="line"><span class="comment">//    animation.removedOnCompletion=NO;</span></div><div class="line"><span class="comment">//设置保存动画的最新状态</span></div><div class="line"><span class="comment">//    animation.fillMode=kCAFillModeForwards;</span></div><div class="line"><span class="comment">//在动画执行完毕后，图层会保持显示动画执行后的状态。但在实质上，图层的属性值还是动画执行前的初始值，并没有真正被改变。</span></div></pre></td></tr></table></figure></p>
<p>CABasicAnimation使用</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//transform 形变属性，基于<span class="keyword">x</span>/<span class="regexp">y/z轴</span></div><div class="line">CABasicAnimation *animation = [self animationInstanceWithKeyPath:@"transform"];</div><div class="line">//还有一个fromValue属性，表示起始值，这里由于使用默认起始值，所以不设置fromValue</div><div class="line">animation.toValue = [NSValue valueWithCATransform3D:CATransform3DMakeRotation(M_PI, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>)];</div><div class="line"><span class="regexp">//</span>将动画添加到layer层即可    </div><div class="line">[self.rLayer addAnimation:animation forKey:nil];</div></pre></td></tr></table></figure>
<p><img src="http://note.youdao.com/yws/api/personal/file/WEBc9a6a7262bc3b2cfc34b44608dc39624?method=download&amp;inline=true&amp;shareKey=30b50c815efe0cb7bedd6e3cde2dd7d0" alt="image"></p>
<h2 id="CAKeyframeAnimation"><a href="#CAKeyframeAnimation" class="headerlink" title="CAKeyframeAnimation"></a>CAKeyframeAnimation</h2><blockquote>
<ol>
<li><p>跟CABasicAnimation的区别是：CABasicAnimation只能从一个数值(fromValue)变到另一个数值(toValue)，而CAKeyframeAnimation会使用一个NSArray保存这些数值</p>
</li>
<li><p>values：就是上述的NSArray对象。里面的元素称为”关键帧”(keyframe)。动画对象会在指定的时间(duration)内，依次显示values数组中的每一个关键帧</p>
</li>
<li><p>path：可以设置一个CGPathRef\CGMutablePathRef,让层跟着路径移动。path只对CALayer的anchorPoint和position起作用。如果你设置了path，那么values将被忽略</p>
</li>
<li><p>keyTimes：可以为对应的关键帧指定对应的时间点,其取值范围为0到1.0,keyTimes中的每一个时间值都对应values中的每一帧.当keyTimes没有设置的时候,各个关键帧的时间是平分的</p>
</li>
<li><p>CABasicAnimation可看做是最多只有2个关键帧的CAKeyframeAnimation</p>
</li>
</ol>
</blockquote>
<p>CAKeyframeAnimation创建</p>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">CAKeyframeAnimation *<span class="built_in">animation</span> = [CAKeyframeAnimation animationWithKeyPath:Key];</div><div class="line"><span class="built_in">animation</span>.duration = <span class="number">2.0</span>;</div><div class="line"><span class="built_in">animation</span>.repeatCount = MAXFLOAT;</div><div class="line">//效果</div><div class="line"><span class="built_in">animation</span>.timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseInEaseOut];</div></pre></td></tr></table></figure>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">kCAMediaTimingFunctionLinear</span> 线性（匀速）</div><div class="line">kCAMediaTimingFunctionEaseIn 先慢</div><div class="line">kCAMediaTimingFunctionEaseOut 后慢</div><div class="line">kCAMediaTimingFunctionEaseInEaseOut 先慢 后慢 中间快</div><div class="line">kCAMediaTimingFunctionDefault 默认</div></pre></td></tr></table></figure>
<p>CAKeyframeAnimation使用<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//对bounds属性进行动画</span></div><div class="line"><span class="built_in">CAKeyframeAnimation</span> *animation = [<span class="keyword">self</span> animationInstanceWithKeyPath:<span class="string">@"bounds"</span>];</div><div class="line"></div><div class="line"><span class="built_in">NSValue</span> *v1 = [<span class="built_in">NSValue</span> valueWithCGRect:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">50</span>, <span class="number">50</span>)];</div><div class="line"><span class="built_in">NSValue</span> *v2 = [<span class="built_in">NSValue</span> valueWithCGRect:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">50</span>, <span class="number">125</span>)];</div><div class="line"><span class="built_in">NSValue</span> *v3 = [<span class="built_in">NSValue</span> valueWithCGRect:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">125</span>, <span class="number">125</span>)];</div><div class="line"><span class="built_in">NSValue</span> *v4 = [<span class="built_in">NSValue</span> valueWithCGRect:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">125</span>, <span class="number">50</span>)];</div><div class="line"><span class="built_in">NSValue</span> *v5 = [<span class="built_in">NSValue</span> valueWithCGRect:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">50</span>, <span class="number">50</span>)];</div><div class="line"></div><div class="line">animation.values = @[v1, v2, v3, v4, v5];</div><div class="line"></div><div class="line">[<span class="keyword">self</span>.sLayer addAnimation:animation forKey:<span class="literal">nil</span>];</div></pre></td></tr></table></figure></p>
<p><img src="http://note.youdao.com/yws/api/personal/file/WEBe9d00dafdac4048a504c8bba0fb3ff8e?method=download&amp;inline=true&amp;shareKey=fa6b191a2e5b53d82861ff0862b75f42" alt="image"></p>
<h2 id="CATransition"><a href="#CATransition" class="headerlink" title="CATransition"></a>CATransition</h2><p>CAAnimation的子类，用于做转场动画，能够为层提供移出屏幕和移入屏幕的动画效果。iOS比Mac OS X的转场动画效果少一点</p>
<p>UINavigationController就是通过CATransition实现了将控制器的视图推入屏幕的动画效果</p>
<blockquote>
<p>type 进场的效果</p>
<p>subtype 进场的方向</p>
</blockquote>
<p>CATransition 创建<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">CATransition *<span class="built_in">animation</span> = [CATransition <span class="built_in">animation</span>];</div><div class="line"><span class="built_in">animation</span>.duration = <span class="number">2.0</span>;</div><div class="line"><span class="built_in">animation</span>.type = Key;</div><div class="line"><span class="built_in">animation</span>.subtype = subtype;</div><div class="line">//    <span class="built_in">animation</span>.repeatCount = MAXFLOAT;</div><div class="line"><span class="built_in">animation</span>.timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseInEaseOut];</div></pre></td></tr></table></figure></p>
<p>key<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line"><span class="number">1</span>.<span class="meta">#define定义的常量 </span></div><div class="line">kCATransitionFade   交叉淡化过渡</div><div class="line">kCATransitionMoveIn 新视图移到旧视图上面</div><div class="line">kCATransitionPush   新视图把旧视图推出去</div><div class="line">kCATransitionReveal 将旧视图移开,显示下面的新视图</div><div class="line"></div><div class="line"><span class="number">2</span>.用字符串表示</div><div class="line">pageCurl            向上翻一页</div><div class="line">pageUnCurl          向下翻一页</div><div class="line">rippleEffect        滴水效果</div><div class="line">suckEffect          收缩效果，如一块布被抽走</div><div class="line">cube                立方体效果</div><div class="line">oglFlip             上下翻转效果</div><div class="line">*/</div></pre></td></tr></table></figure></p>
<p>subtype</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">kCATransitionFromRight</div><div class="line">kCATransitionFromLeft</div><div class="line">kCATransitionFromTop</div><div class="line">kCATransitionFromBottom</div><div class="line">*/</div></pre></td></tr></table></figure>
<p>CATransition 使用</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">self</span>.animation1 = [<span class="keyword">self</span> <span class="symbol">animationInstanceWithKeyPath:</span>@<span class="string">"cube"</span> <span class="symbol">WithSubtype:</span>subtype];</div><div class="line"></div><div class="line">[<span class="keyword">self</span>.imageView1.layer <span class="symbol">addAnimation:</span><span class="keyword">self</span>.animation1 <span class="symbol">forKey:</span><span class="keyword">nil</span>];</div></pre></td></tr></table></figure>
<p><img src="http://note.youdao.com/yws/api/personal/file/WEBfde529ccfe75edb165aefa87dc26a356?method=download&amp;inline=true&amp;shareKey=0948d5e7bdcdb0e96458c4ae83c69fa5" alt="image"></p>
<h2 id="CAAnimationGroup"><a href="#CAAnimationGroup" class="headerlink" title="CAAnimationGroup"></a>CAAnimationGroup</h2><p>CAAnimation的子类，可以保存一组动画对象，将CAAnimationGroup对象加入层后，组中所有动画对象可以同时并发运行</p>
<blockquote>
<p>animations：用来保存一组动画对象的NSArray</p>
</blockquote>
<p>默认情况下，一组动画对象是同时运行的，也可以通过设置动画对象的beginTime属性来更改动画的开始时间</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">CABasicAnimation *animation1 = [CABasicAnimation animationWithKeyPath:@<span class="string">"position"</span>]<span class="comment">;</span></div><div class="line">animation1.toValue = [NSValue valueWithCGPoint:CGPointMake(<span class="number">220</span>, <span class="number">320</span>)]<span class="comment">;</span></div><div class="line"></div><div class="line">CABasicAnimation *animation2 = [CABasicAnimation animationWithKeyPath:@<span class="string">"transform.scale"</span>]<span class="comment">;</span></div><div class="line">animation2.toValue = @(<span class="number">0</span>.<span class="number">0</span>)<span class="comment">;</span></div><div class="line"></div><div class="line">CABasicAnimation *animation3 = [CABasicAnimation animationWithKeyPath:@<span class="string">"transform.rotation"</span>]<span class="comment">;</span></div><div class="line">animation3.toValue= @(M_PI)<span class="comment">;</span></div><div class="line"></div><div class="line">CAAnimationGroup *groupAnimation = [CAAnimationGroup animation]<span class="comment">;</span></div><div class="line">groupAnimation.animations = @[animation1, animation2, animation3]<span class="comment">;</span></div><div class="line">groupAnimation.duration = <span class="number">3</span>.<span class="number">0</span><span class="comment">;</span></div><div class="line">groupAnimation.repeatCount = MAXFLOAT<span class="comment">;</span></div><div class="line"></div><div class="line">[self.layer <span class="keyword">addAnimation:groupAnimation </span>forKey:nil]<span class="comment">;</span></div></pre></td></tr></table></figure>
<p><img src="http://note.youdao.com/yws/api/personal/file/WEB07f98d892ed2024a6997cf632b066d09?method=download&amp;inline=true&amp;shareKey=f1b534f80fa8e0d94ac5927db06ab4fb" alt="image"></p>
<h2 id="UIView封装动画"><a href="#UIView封装动画" class="headerlink" title="UIView封装动画"></a>UIView封装动画</h2><h3 id="首尾方式"><a href="#首尾方式" class="headerlink" title="首尾方式"></a>首尾方式</h3><p>UIKit直接将动画集成到UIView类中，当内部的一些属性发生改变时，UIView将为这些改变提供动画支持</p>
<p>执行动画所需要的工作由UIView类自动完成，但仍要在希望执行动画时通知视图，为此需要将改变属性的代码放在[UIView beginAnimations:nil context:nil]和[UIView commitAnimations]之间</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置动画代理对象，当动画开始或者结束时会发消息给代理对象</span></div><div class="line">+ (<span class="keyword">void</span>)<span class="string">setAnimationDelegate:</span>(id)delegate  </div><div class="line"></div><div class="line"><span class="comment">//当动画即将开始时，执行delegate对象的selector，并且把beginAnimations:context:中传入的参数传进selector</span></div><div class="line">+ (<span class="keyword">void</span>)<span class="string">setAnimationWillStartSelector:</span>(SEL)selector   </div><div class="line"></div><div class="line"><span class="comment">//当动画结束时，执行delegate对象的selector，并且把beginAnimations:context:中传入的参数传进selector</span></div><div class="line">+ (<span class="keyword">void</span>)<span class="string">setAnimationDidStopSelector:</span>(SEL)selector  </div><div class="line"></div><div class="line"><span class="comment">//动画的持续时间，秒为单位</span></div><div class="line">+ (<span class="keyword">void</span>)<span class="string">setAnimationDuration:</span>(NSTimeInterval)duration   </div><div class="line"></div><div class="line"><span class="comment">//动画延迟delay秒后再开始</span></div><div class="line">+ (<span class="keyword">void</span>)<span class="string">setAnimationDelay:</span>(NSTimeInterval)delay </div><div class="line"></div><div class="line"><span class="comment">//动画的开始时间，默认为now</span></div><div class="line">+ (<span class="keyword">void</span>)<span class="string">setAnimationStartDate:</span>(NSDate *)startDate   </div><div class="line"></div><div class="line"><span class="comment">//动画的节奏控制</span></div><div class="line">+ (<span class="keyword">void</span>)<span class="string">setAnimationCurve:</span>(UIViewAnimationCurve)curve</div><div class="line"></div><div class="line"><span class="comment">//动画的重复次数</span></div><div class="line">+ (<span class="keyword">void</span>)<span class="string">setAnimationRepeatCount:</span>(<span class="keyword">float</span>)repeatCount  </div><div class="line"></div><div class="line"><span class="comment">//如果设置为YES,代表动画每次重复执行的效果会跟上一次相反</span></div><div class="line">+ (<span class="keyword">void</span>)<span class="string">setAnimationRepeatAutoreverses:</span>(BOOL)repeatAutoreverses  </div><div class="line"></div><div class="line"><span class="comment">//设置视图view的过渡效果, transition指定过渡类型, cache设置YES代表使用视图缓存，性能较好</span></div><div class="line">+ (<span class="keyword">void</span>)<span class="string">setAnimationTransition:</span>(UIViewAnimationTransition)transition <span class="string">forView:</span>(UIView *)view <span class="string">cache:</span>(BOOL)cache</div></pre></td></tr></table></figure>
<p>示例</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//首尾式动画</span></div><div class="line">[<span class="built_in">UIView</span> beginAnimations:<span class="literal">nil</span> context:<span class="literal">nil</span>];</div><div class="line"><span class="comment">//执行动画</span></div><div class="line"><span class="comment">//设置动画执行时间</span></div><div class="line">[<span class="built_in">UIView</span> setAnimationDuration:<span class="number">2.0</span>];</div><div class="line"><span class="comment">//设置代理</span></div><div class="line">[<span class="built_in">UIView</span> setAnimationDelegate:<span class="keyword">self</span>];</div><div class="line"><span class="comment">//设置动画执行完毕调用的事件</span></div><div class="line">[<span class="built_in">UIView</span> setAnimationDidStopSelector:<span class="keyword">@selector</span>(didStopAnimation)];</div><div class="line"><span class="keyword">self</span>.v1.center=<span class="built_in">CGPointMake</span>(<span class="number">125</span>, <span class="number">125</span>);</div><div class="line">[<span class="built_in">UIView</span> commitAnimations];</div></pre></td></tr></table></figure>
<h3 id="Block方式"><a href="#Block方式" class="headerlink" title="Block方式"></a>Block方式</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">+ (<span class="keyword">void</span>)<span class="string">animateWithDuration:</span>(NSTimeInterval)duration <span class="string">delay:</span>(NSTimeInterval)delay <span class="string">options:</span>(UIViewAnimationOptions)options <span class="string">animations:</span>(<span class="keyword">void</span> (^)(<span class="keyword">void</span>))animations <span class="string">completion:</span>(<span class="keyword">void</span> (^)(BOOL finished))completion</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">参数解析:</div><div class="line"></div><div class="line">duration：动画的持续时间</div><div class="line"></div><div class="line">delay：动画延迟delay秒后开始</div><div class="line"></div><div class="line">options：动画的节奏控制</div><div class="line"></div><div class="line">animations：将改变视图属性的代码放在这个block中</div><div class="line"></div><div class="line">completion：动画结束后，会自动调用这个block</div><div class="line">*/</div></pre></td></tr></table></figure>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">转场动画</div><div class="line"></div><div class="line">+ (<span class="keyword">void</span>)<span class="string">transitionWithView:</span>(UIView *)view <span class="string">duration:</span>(NSTimeInterval)duration <span class="string">options:</span>(UIViewAnimationOptions)options <span class="string">animations:</span>(<span class="keyword">void</span> (^)(<span class="keyword">void</span>))animations <span class="string">completion:</span>(<span class="keyword">void</span> (^)(BOOL finished))completion</div><div class="line"><span class="comment">/*</span></div><div class="line">参数解析:</div><div class="line"></div><div class="line">duration：动画的持续时间</div><div class="line"></div><div class="line">view：需要进行转场动画的视图</div><div class="line"></div><div class="line">options：转场动画的类型</div><div class="line"></div><div class="line">animations：将改变视图属性的代码放在这个block中</div><div class="line"></div><div class="line">completion：动画结束后，会自动调用这个block</div><div class="line">*/</div><div class="line"></div><div class="line">+ (<span class="keyword">void</span>)<span class="string">transitionFromView:</span>(UIView *)fromView <span class="string">toView:</span>(UIView *)toView <span class="string">duration:</span>(NSTimeInterval)duration <span class="string">options:</span>(UIViewAnimationOptions)options <span class="string">completion:</span>(<span class="keyword">void</span> (^)(BOOL finished))completion</div><div class="line"></div><div class="line">方法调用完毕后，相当于执行了下面两句代码：</div><div class="line"></div><div class="line"><span class="comment">// 添加toView到父视图</span></div><div class="line"></div><div class="line">[fromView.superview <span class="string">addSubview:</span>toView]; </div><div class="line"></div><div class="line"><span class="comment">// 把fromView从父视图中移除</span></div><div class="line"></div><div class="line">[fromView.superview removeFromSuperview];</div><div class="line"><span class="comment">/*</span></div><div class="line">参数解析:</div><div class="line"></div><div class="line">duration：动画的持续时间</div><div class="line"></div><div class="line">options：转场动画的类型</div><div class="line"></div><div class="line">animations：将改变视图属性的代码放在这个block中</div><div class="line"></div><div class="line">completion：动画结束后，会自动调用这个block</div><div class="line">*/</div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[<span class="built_in">UIView</span> animateWithDuration:<span class="number">2.0</span> delay:<span class="number">0</span> options:<span class="built_in">UIViewAnimationOptionCurveEaseInOut</span> animations:^&#123;</div><div class="line"><span class="keyword">self</span>.v2.center=<span class="built_in">CGPointMake</span>(<span class="number">125</span>, <span class="number">125</span>);</div><div class="line">&#125; completion:^(<span class="built_in">BOOL</span> finished) &#123;</div><div class="line"><span class="keyword">self</span>.v2.center=<span class="built_in">CGPointMake</span>(<span class="number">10</span>, <span class="number">10</span>);</div><div class="line">&#125;];</div><div class="line"></div><div class="line">[<span class="built_in">UIView</span> transitionWithView:<span class="keyword">self</span>.v3 duration:<span class="number">2.0</span> options:<span class="built_in">UIViewAnimationOptionCurveEaseInOut</span> animations:^&#123;</div><div class="line"><span class="keyword">self</span>.v3.center=<span class="built_in">CGPointMake</span>(<span class="number">125</span>, <span class="number">125</span>);</div><div class="line">&#125; completion:^(<span class="built_in">BOOL</span> finished) &#123;</div><div class="line"><span class="keyword">self</span>.v3.center=<span class="built_in">CGPointMake</span>(<span class="number">10</span>, <span class="number">10</span>);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p><img src="http://note.youdao.com/yws/api/personal/file/WEB6986fe51522e1e0bee85b9ec3236dc12?method=download&amp;inline=true&amp;shareKey=4f7d6a288a0df1a889d9dd3c224ac009" alt="image"></p>
<h2 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h2><h3 id="移除动画"><a href="#移除动画" class="headerlink" title="移除动画"></a>移除动画</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[self.v1.layer <span class="string">addAnimation:</span>keyAnima <span class="string">forKey:</span>@<span class="string">"test"</span>];</div><div class="line">[self.v1.layer <span class="string">removeAnimationForKey:</span>@<span class="string">"test"</span>];</div></pre></td></tr></table></figure>
<h3 id="UIActivityIndicatorView"><a href="#UIActivityIndicatorView" class="headerlink" title="UIActivityIndicatorView"></a>UIActivityIndicatorView</h3><p>是一个旋转进度轮，可以用来告知用户有一个操作正在进行中，一般用initWithActivityIndicatorStyle初始化</p>
<p>方法解析:</p>
<ul>
<li><p>(void)startAnimating; 开始动画</p>
</li>
<li><p>(void)stopAnimating;  停止动画</p>
</li>
<li><p>(BOOL)isAnimating;  是否正在运行动画</p>
</li>
</ul>
<p>UIActivityIndicatorViewStyle有3个值可供选择：</p>
<p>UIActivityIndicatorViewStyleWhiteLarge   //大型白色指示器    </p>
<p>UIActivityIndicatorViewStyleWhite      //标准尺寸白色指示器    </p>
<p>UIActivityIndicatorViewStyleGray    //灰色指示器，用于白色背景</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[输入界面]]></title>
      <url>https://liujingh.github.io/2016/10/08/iOS%E5%BC%80%E5%8F%91/Demo/WorkBasketVC/</url>
      <content type="html"><![CDATA[<h1 id="WorkBasketVC简介"><a href="#WorkBasketVC简介" class="headerlink" title="WorkBasketVC简介"></a>WorkBasketVC简介</h1><p>这个Demo使用UITableView做了一个富有动画效果的列表，好玩也好看</p>
<blockquote>
<p><a href="http://note.youdao.com/noteshare?id=28936fe391edbea8450e9cdb0bca63f8" target="_blank" rel="external">有道云笔记下载Demo</a></p>
</blockquote>
<p><img src="http://note.youdao.com/yws/api/personal/file/WEB9b026b53a69238aa05bcd0a932ce9924?method=download&amp;inline=true&amp;shareKey=3d30638ce7d804edde40f53d574f8694" alt="WorkBasketVC"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Apache HTTP服务器]]></title>
      <url>https://liujingh.github.io/2016/10/08/Linux/CentOS%207.2%20%E5%AE%89%E8%A3%85Apache%20HTTP%20Server/</url>
      <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//安装httpd会自动安装一下依赖包：</span></div><div class="line">yum -yinstall httpd</div></pre></td></tr></table></figure>
<p>安装完成提示</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">更新完毕:</div><div class="line">  httpd<span class="selector-class">.x86_64</span> <span class="number">0</span>:<span class="number">2.4</span>.<span class="number">6</span>-<span class="number">40</span><span class="selector-class">.el7</span><span class="selector-class">.centos</span>.<span class="number">4</span>                                          </div><div class="line"></div><div class="line">作为依赖被升级:</div><div class="line">  httpd-devel<span class="selector-class">.x86_64</span> <span class="number">0</span>:<span class="number">2.4</span>.<span class="number">6</span>-<span class="number">40</span><span class="selector-class">.el7</span><span class="selector-class">.centos</span>.<span class="number">4</span>                                    </div><div class="line">  httpd-manual<span class="selector-class">.noarch</span> <span class="number">0</span>:<span class="number">2.4</span>.<span class="number">6</span>-<span class="number">40</span><span class="selector-class">.el7</span><span class="selector-class">.centos</span>.<span class="number">4</span>                                   </div><div class="line">  httpd-tools<span class="selector-class">.x86_64</span> <span class="number">0</span>:<span class="number">2.4</span>.<span class="number">6</span>-<span class="number">40</span><span class="selector-class">.el7</span><span class="selector-class">.centos</span>.<span class="number">4</span>                                    </div><div class="line">  mod_ssl<span class="selector-class">.x86_64</span> <span class="number">1</span>:<span class="number">2.4</span>.<span class="number">6</span>-<span class="number">40</span><span class="selector-class">.el7</span><span class="selector-class">.centos</span>.<span class="number">4</span>                                        </div><div class="line"></div><div class="line">完毕！</div></pre></td></tr></table></figure>
<h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//进入httpd配置文件夹目录</span></div><div class="line">cd /etc/httpd/conf</div><div class="line"><span class="comment">//将原有配置文件备份</span></div><div class="line"><span class="selector-id">#cp</span> httpd<span class="selector-class">.conf</span> httpd<span class="selector-class">.conf</span><span class="selector-class">.origin</span></div><div class="line"><span class="comment">//开始修改配置文件</span></div><div class="line"><span class="selector-id">#vim</span> httpd.conf</div></pre></td></tr></table></figure>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置Apache服务器的根目录，一般不要改动它</span></div><div class="line">ServerRoot <span class="string">"/etc/httpd"</span></div><div class="line"></div><div class="line"><span class="comment">//设置服务器使用的端口 在防火墙中需要打开这个端口的权限</span></div><div class="line">Listen <span class="number">80</span></div><div class="line"></div><div class="line"><span class="comment">//</span></div><div class="line">Include conf.modules.d/*.conf</div><div class="line"></div><div class="line"><span class="comment">//</span></div><div class="line">User apache</div><div class="line">Group apache</div><div class="line"></div><div class="line"><span class="comment">//当客户端计算机访问服务器发生错误的时候，服务器通常都会向客户端计算机返回错误提示页面，为了方便解决错误。</span></div><div class="line"><span class="comment">//在这个网页中通常包含有管理员的电子邮件地址，此时可以采用ServerAdmin语句来设置管理员的电子邮件地址</span></div><div class="line">ServerAdmin root@localhost</div><div class="line"></div><div class="line"><span class="comment">//为了方便Apache识别服务器自身的信息，可以使用ServerName语句来设置服务器的主机名称。</span></div><div class="line"><span class="comment">//在ServerName语句中，如果服务器有域名则填写服务器的域名；如果没有域名，则填入服务器的IP地址。</span></div><div class="line"><span class="comment">//默认被注释掉了</span></div><div class="line"><span class="meta">#ServerName www.example.com:80</span></div><div class="line"></div><div class="line"><span class="comment">//Apache服务器主目录默认路径为"/var/www/html"，可以将需要发布的网页放置在这个目录中。</span></div><div class="line"><span class="comment">//同时也可以把主目录的路径修改为别的目录便于用户管理和使用。</span></div><div class="line">DocumentRoot <span class="string">"/var/www/html"</span></div><div class="line"></div><div class="line">&lt;Directory /&gt;</div><div class="line">    AllowOverride none</div><div class="line">    Require all denied</div><div class="line">&lt;/Directory&gt;</div><div class="line"></div><div class="line"><span class="comment">//默认文档是指在网页浏览器中输入Web站点的IP地址或者域名显示出来的Web页面，也就是通常所说的主页。</span></div><div class="line"><span class="comment">//在缺省情况下，Apache的默认文档名为index.html，默认文档由DirectoryIndex语句进行定义。</span></div><div class="line"><span class="comment">//如果有多个文件名，每个文件名之间必须用空格进行分隔，Apache会根据文件名的先后顺序查找在DirectoryIndex语句中指定的文件名。</span></div><div class="line"><span class="comment">//如果能找到第1个则调用第1个，否则再寻找并调用第2个，依次类推。</span></div><div class="line"><span class="comment">//例如：DirectoryIndex index.html index.htm index.php</span></div><div class="line">&lt;IfModule dir_module&gt;</div><div class="line">    DirectoryIndex index.html</div><div class="line">&lt;/IfModule&gt;</div><div class="line"></div><div class="line"><span class="comment">//错误日志。错误日志记录了Apache在启动和运行时发生的错误，所以当Apache出错的时候，应该首先检查这个日志文件。</span></div><div class="line"><span class="comment">//通常错误日志的文件名为error_log，错误日志文件存放的位置和文件名可以通过ErrorLog参数进行设置。例如"ErrorLog logs/erroe_log"。</span></div><div class="line"><span class="comment">//如果日志文件存放路径不是以"/"开头，则表示该路径是相对于ServerRoot目录的相对路径。</span></div><div class="line">ErrorLog <span class="string">"logs/error_log"</span></div><div class="line"></div><div class="line"><span class="comment">//AddDefaultCharset选项设置了服务器返回给客户端计算机的默认字符集。</span></div><div class="line"><span class="comment">//由于Apache服务器默认字符集为西欧（UTF-8），因此当客户端访问服务器的中文网页时会出现乱码现象。</span></div><div class="line"><span class="comment">//解决的办法是将语句"AddDefaultCharset UTF-8"改为"AddDefaultCharset GB2312"，然后重新启动Apache服务器，中文网页就可以正常显示了。</span></div><div class="line">AddDefaultCharset UTF-<span class="number">8</span></div></pre></td></tr></table></figure>
<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#启动apache</span></div><div class="line">systemctl start httpd.service </div><div class="line"><span class="meta">#停止apache</span></div><div class="line">systemctl stop httpd.service </div><div class="line"><span class="meta">#重启apache</span></div><div class="line">systemctl restart httpd.service </div><div class="line"><span class="meta">#设置apache开机启动</span></div><div class="line">systemctl enable httpd.service</div></pre></td></tr></table></figure>
<blockquote>
<p>可能因为防火墙问题导致启动之后不能访问</p>
</blockquote>
<p>至此，在浏览器中输入IP可直接查看</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//此<span class="built_in">IP</span>为本次试验的虚拟机<span class="built_in">IP</span></div><div class="line"><span class="symbol">http:</span>//<span class="number">172.16</span><span class="meta">.204</span><span class="meta">.135</span></div></pre></td></tr></table></figure>
<p><img src="http://note.youdao.com/yws/api/personal/file/WEBe63e62ab62c6ea35f544d69df0e8c4d5?method=download&amp;inline=true&amp;shareKey=c11fcf7c306294d3c0f2cf948d54143f" alt="CentOS7.2安装Apache1"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Webmin]]></title>
      <url>https://liujingh.github.io/2016/10/08/Linux/Webmin%E5%B7%A5%E5%85%B7/</url>
      <content type="html"><![CDATA[<h2 id="Webmin简介"><a href="#Webmin简介" class="headerlink" title="Webmin简介"></a>Webmin简介</h2><h2 id="Webmin安装"><a href="#Webmin安装" class="headerlink" title="Webmin安装"></a>Webmin安装</h2><p>方式一：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wget <span class="string">http:</span><span class="comment">//download.webmin.com/download/yum/webmin-1.810-1.noarch.rpm</span></div><div class="line">rpm -ivh webmin<span class="number">-1.810</span><span class="number">-1.</span>noarch.rpm</div><div class="line"><span class="regexp">/etc/</span>rc.d<span class="regexp">/init.d/</span>webmin start</div></pre></td></tr></table></figure></p>
<p>方式二：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">vim /etc/yum<span class="selector-class">.repos</span><span class="selector-class">.d</span>/webmin<span class="selector-class">.repo</span></div><div class="line">[Webmin]</div><div class="line"></div><div class="line">name=Webmin Distribution Neutral</div><div class="line">#baseurl=http:<span class="comment">//download.webmin.com/download/yum</span></div><div class="line">mirrorlist=http:<span class="comment">//download.webmin.com/download/yum/mirrorlist</span></div><div class="line"></div><div class="line"></div><div class="line">wget http:<span class="comment">//www.webmin.com/jcameron-key.asc</span></div><div class="line">rpm --import jcameron-key<span class="selector-class">.asc</span></div><div class="line">yum install webmin</div></pre></td></tr></table></figure></p>
<p>安装成功提示：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Webmin <span class="keyword">install</span> complete. You can <span class="keyword">now</span> login <span class="keyword">to</span> https://localhost.localdomain:<span class="number">10000</span>/</div></pre></td></tr></table></figure></p>
<p>安装成功之后，还要处理一下防火墙问题，要么打开防火墙的10000端口，要么直接关闭掉防火墙。这里是直接关掉防火墙。</p>
<p>CentOS 7.2默认使用的是firewall作为防火墙。<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#停止firewall</span></div><div class="line">systemctl <span class="keyword">stop</span> firewalld.service </div><div class="line"><span class="meta">#禁止firewall开机启动</span></div><div class="line">systemctl <span class="keyword">disable</span> firewalld.service</div></pre></td></tr></table></figure></p>
<h2 id="登录Webmin"><a href="#登录Webmin" class="headerlink" title="登录Webmin"></a>登录Webmin</h2><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#172.16.204.135是我的虚拟机的IP地址，请自行替换</span></div><div class="line">https:<span class="comment">//172.16.204.135:10000</span></div><div class="line"><span class="meta">#如果浏览器提示安全连接问题(由于https造成的)登录不上，可以换一个浏览器试试，我用火狐连接不了</span></div></pre></td></tr></table></figure>
<p>登录界面</p>
<blockquote>
<p>登录密码为Linux的root账户的密码</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/api/personal/file/WEB0b431ab105750b70f341ba7bfebaf065?method=download&amp;inline=true&amp;shareKey=4300f4463ec5cc3cbbebfbedc03000a7" alt="image"></p>
<h3 id="主界面"><a href="#主界面" class="headerlink" title="主界面"></a>主界面</h3><p><img src="http://note.youdao.com/yws/api/personal/file/WEB9d04a24e16b1ef37d132ec0e74e35c36?method=download&amp;inline=true&amp;shareKey=4d90c6f205253b6915025e4390bef955" alt="image"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[UIBezierPath]]></title>
      <url>https://liujingh.github.io/2016/10/08/iOS%E5%BC%80%E5%8F%91/UIBezierPath/</url>
      <content type="html"><![CDATA[<h4 id="UIBezierPath的简单实例"><a href="#UIBezierPath的简单实例" class="headerlink" title="UIBezierPath的简单实例"></a>UIBezierPath的简单实例</h4><p><img src="http://note.youdao.com/yws/api/personal/file/WEBe05bc7c7b329e8afda0e0fa092224e39?method=download&amp;shareKey=000c09a6286d8f52d0ab5d028a9c56d5" alt="image"></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//图示代码 在UIView的drawRect:方法中实现</span></div><div class="line"><span class="comment">//创建曲线Path</span></div><div class="line"><span class="built_in">UIBezierPath</span> *path = [<span class="built_in">UIBezierPath</span> bezierPath];</div><div class="line"><span class="comment">//设置起点</span></div><div class="line">[path moveToPoint:<span class="built_in">CGPointMake</span>(<span class="number">200</span>, <span class="number">100</span>)];</div><div class="line"><span class="comment">//绘制图形</span></div><div class="line">[path addCurveToPoint:<span class="built_in">CGPointMake</span>(<span class="number">100</span>, <span class="number">200</span>) controlPoint1:<span class="built_in">CGPointMake</span>(<span class="number">100</span>, <span class="number">100</span>) controlPoint2:<span class="built_in">CGPointMake</span>(<span class="number">200</span>, <span class="number">200</span>)];</div><div class="line"><span class="comment">//绘制图形</span></div><div class="line">[path addCurveToPoint:<span class="built_in">CGPointMake</span>(<span class="number">200</span>, <span class="number">300</span>) controlPoint1:<span class="built_in">CGPointMake</span>(<span class="number">200</span>, <span class="number">200</span>) controlPoint2:<span class="built_in">CGPointMake</span>(<span class="number">100</span>, <span class="number">300</span>)];</div><div class="line"></div><div class="line"><span class="comment">//设置线宽</span></div><div class="line">[path setLineWidth:<span class="number">3</span>];</div><div class="line"><span class="comment">//设置颜色</span></div><div class="line">[[<span class="built_in">UIColor</span> redColor] setStroke];</div><div class="line"><span class="comment">//将路径绘制出来</span></div><div class="line">[path stroke];</div><div class="line"></div><div class="line"><span class="comment">//创建矩形Path</span></div><div class="line"><span class="built_in">UIBezierPath</span> *path2 = [<span class="built_in">UIBezierPath</span> bezierPathWithRect:<span class="built_in">CGRectMake</span>(<span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>)];</div><div class="line"></div><div class="line">[path2 setLineWidth:<span class="number">3</span>];</div><div class="line">[[<span class="built_in">UIColor</span> brownColor] setStroke];</div><div class="line">[path2 stroke];</div><div class="line"></div><div class="line"><span class="comment">//创建椭圆Path</span></div><div class="line"><span class="built_in">UIBezierPath</span> *path3 = [<span class="built_in">UIBezierPath</span> bezierPathWithOvalInRect:<span class="built_in">CGRectMake</span>(<span class="number">50</span>, <span class="number">400</span>, <span class="number">80</span>, <span class="number">50</span>)];</div><div class="line"></div><div class="line">[path3 setLineWidth:<span class="number">3</span>];</div><div class="line">[[<span class="built_in">UIColor</span> brownColor] setStroke];</div><div class="line">[[<span class="built_in">UIColor</span> greenColor] setFill];</div><div class="line">[path3 stroke];</div><div class="line">[path3 fill];</div><div class="line"></div><div class="line"><span class="comment">//创建圆角矩形Path</span></div><div class="line"><span class="built_in">UIBezierPath</span> *path4 = [<span class="built_in">UIBezierPath</span> bezierPathWithRoundedRect:<span class="built_in">CGRectMake</span>(<span class="number">50</span>, <span class="number">300</span>, <span class="number">50</span>, <span class="number">80</span>) cornerRadius:<span class="number">15</span>];</div><div class="line"></div><div class="line">[path4 setLineWidth:<span class="number">3</span>];</div><div class="line">[[<span class="built_in">UIColor</span> brownColor] setStroke];</div><div class="line">[path4 stroke];</div><div class="line"></div><div class="line"><span class="comment">//创建一个弧线Path</span></div><div class="line"><span class="built_in">UIBezierPath</span> *path5 = [<span class="built_in">UIBezierPath</span> bezierPathWithArcCenter:<span class="built_in">CGPointMake</span>(<span class="number">300</span>, <span class="number">400</span>) radius:<span class="number">50</span> startAngle:<span class="number">0</span> endAngle:M_PI_4 clockwise:<span class="literal">NO</span>];</div><div class="line"></div><div class="line">[path5 setLineWidth:<span class="number">3</span>];</div><div class="line">[[<span class="built_in">UIColor</span> brownColor] setStroke];</div><div class="line">[path5 stroke];</div></pre></td></tr></table></figure>
<h4 id="UIBezeiPath的常用绘图函数"><a href="#UIBezeiPath的常用绘图函数" class="headerlink" title="UIBezeiPath的常用绘图函数"></a>UIBezeiPath的常用绘图函数</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//绘直线</span></div><div class="line">- (<span class="keyword">void</span>)<span class="string">addLineToPoint:</span>(CGPoint)point</div><div class="line"><span class="comment">//绘弧线</span></div><div class="line">- (<span class="keyword">void</span>)<span class="string">addArcWithCenter:</span>(CGPoint)center <span class="string">radius:</span>(CGFloat)radius <span class="string">startAngle:</span>(CGFloat)startAngle <span class="string">endAngle:</span>(CGFloat)endAngle <span class="string">clockwise:</span>(BOOL)clockwise</div><div class="line"><span class="comment">//绘曲线</span></div><div class="line">- (<span class="keyword">void</span>)<span class="string">addCurveToPoint:</span>(CGPoint)endPoint <span class="string">controlPoint1:</span>(CGPoint)controlPoint1 <span class="string">controlPoint2:</span>(CGPoint)controlPoint2</div><div class="line">- (<span class="keyword">void</span>)<span class="string">addQuadCurveToPoint:</span>(CGPoint)endPoint <span class="string">controlPoint:</span>(CGPoint)controlPoint</div></pre></td></tr></table></figure>
<h4 id="UIBezierPath的有关参数配置"><a href="#UIBezierPath的有关参数配置" class="headerlink" title="UIBezierPath的有关参数配置"></a>UIBezierPath的有关参数配置</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">readonly</span>,<span class="keyword">getter</span>=isEmpty) <span class="built_in">BOOL</span> empty;</div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">readonly</span>) <span class="built_in">CGRect</span> bounds;</div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">readonly</span>) <span class="built_in">CGPoint</span> currentPoint;</div><div class="line">- (<span class="built_in">BOOL</span>)containsPoint:(<span class="built_in">CGPoint</span>)point;</div><div class="line"></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">CGFloat</span> lineWidth;</div><div class="line"></div><div class="line"><span class="comment">//线段风格</span></div><div class="line"><span class="comment">/*</span></div><div class="line">kCGLineCapButt, //默认</div><div class="line">kCGLineCapRound, //圆角</div><div class="line">kCGLineCapSquare //矩形</div><div class="line">*/</div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">CGLineCap</span> lineCapStyle;</div><div class="line"></div><div class="line"><span class="comment">//线段交点风格</span></div><div class="line"><span class="comment">/*</span></div><div class="line">kCGLineJoinMiter, //默认</div><div class="line">kCGLineJoinRound, //圆角</div><div class="line">kCGLineJoinBevel //斜角</div><div class="line">*/</div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">CGLineJoin</span> lineJoinStyle;</div><div class="line"></div><div class="line"><span class="comment">//最大斜接长度</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">CGFloat</span> miterLimit; <span class="comment">// Used when lineJoinStyle is kCGLineJoinMiter</span></div><div class="line"></div><div class="line"><span class="comment">//平滑度 会增大性能消耗</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">CGFloat</span> flatness;</div><div class="line"></div><div class="line"><span class="comment">//单双数圈规则是否用于绘制路径，默认是NO</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> usesEvenOddFillRule; </div><div class="line"></div><div class="line"><span class="comment">//设置虚线</span></div><div class="line">- (<span class="keyword">void</span>)setLineDash:(<span class="keyword">nullable</span> <span class="keyword">const</span> <span class="built_in">CGFloat</span> *)pattern count:(<span class="built_in">NSInteger</span>)count phase:(<span class="built_in">CGFloat</span>)phase;</div><div class="line">- (<span class="keyword">void</span>)getLineDash:(<span class="keyword">nullable</span> <span class="built_in">CGFloat</span> *)pattern count:(<span class="keyword">nullable</span> <span class="built_in">NSInteger</span> *)count phase:(<span class="keyword">nullable</span> <span class="built_in">CGFloat</span> *)phase;</div><div class="line"></div><div class="line"><span class="comment">//填充</span></div><div class="line">- (<span class="keyword">void</span>)fill;</div><div class="line"><span class="comment">//描边</span></div><div class="line">- (<span class="keyword">void</span>)stroke;</div><div class="line"></div><div class="line"><span class="comment">//设置混合模式</span></div><div class="line">- (<span class="keyword">void</span>)fillWithBlendMode:(<span class="built_in">CGBlendMode</span>)blendMode alpha:(<span class="built_in">CGFloat</span>)alpha;</div><div class="line">- (<span class="keyword">void</span>)strokeWithBlendMode:(<span class="built_in">CGBlendMode</span>)blendMode alpha:(<span class="built_in">CGFloat</span>)alpha;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)addClip;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[FTP服务器]]></title>
      <url>https://liujingh.github.io/2016/10/08/Linux/CentOS7.2%20%E9%85%8D%E7%BD%AEFTP%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      <content type="html"><![CDATA[<h2 id="安装vsftpd"><a href="#安装vsftpd" class="headerlink" title="安装vsftpd"></a>安装vsftpd</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#安装vsftpd</span></div><div class="line">yum <span class="keyword">install</span> vsftpd </div><div class="line"><span class="comment">#安装vsftpd虚拟用户配置依赖包</span></div><div class="line">yum <span class="keyword">install</span> -y psmisc net-tools systemd-devel libdb-devel perl-DBI</div></pre></td></tr></table></figure>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#启动</span></div><div class="line">systemctl start vsftpd.service </div><div class="line"><span class="meta">#设置vsftpd开机启动</span></div><div class="line">systemctl enable vsftpd.service</div></pre></td></tr></table></figure>
<h3 id="配置防火墙，开启FTP服务器需要的端口"><a href="#配置防火墙，开启FTP服务器需要的端口" class="headerlink" title="配置防火墙，开启FTP服务器需要的端口"></a>配置防火墙，开启FTP服务器需要的端口</h3><p>CentOS 7.2默认使用的是firewall作为防火墙，这里改为iptables防火墙。</p>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#停止firewall</span></div><div class="line">systemctl <span class="keyword">stop</span> firewalld.service </div><div class="line"><span class="meta">#禁止firewall开机启动</span></div><div class="line">systemctl <span class="keyword">disable</span> firewalld.service</div></pre></td></tr></table></figure>
<p>安装iptables防火墙</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum <span class="keyword">install</span> iptables-services <span class="comment">#安装</span></div></pre></td></tr></table></figure>
<p>配置tcp通信端口和FPT被动通道<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">vi /etc/sysconfig/iptables <span class="comment">#编辑防火墙配置文件</span></div><div class="line"></div><div class="line"><span class="comment"># sample configuration for iptables service</span></div><div class="line"><span class="comment"># you can edit this manually or use system-config-firewall</span></div><div class="line"><span class="comment"># please do not ask us to add additional ports/services to this default configuration</span></div><div class="line">*filter</div><div class="line">:INPUT ACCEPT [<span class="number">0</span>:<span class="number">0</span>]</div><div class="line">:FORWARD ACCEPT [<span class="number">0</span>:<span class="number">0</span>]</div><div class="line">:OUTPUT ACCEPT [<span class="number">0</span>:<span class="number">0</span>]</div><div class="line">-A INPUT -m <span class="keyword">state</span> --state RELATED,ESTABLISHED -j ACCEPT</div><div class="line">-A INPUT -p icmp -j ACCEPT</div><div class="line">-A INPUT -i lo -j ACCEPT</div><div class="line">-A INPUT -p tcp -m <span class="keyword">state</span> --state NEW -m tcp --dport <span class="number">22</span> -j ACCEPT</div><div class="line"><span class="comment">#配置21端口</span></div><div class="line">-A INPUT -m <span class="keyword">state</span> --state NEW -m tcp -p tcp --dport <span class="number">21</span> -j ACCEPT</div><div class="line"><span class="comment">#使用到10060到10090端口 这里的端口号要和第四步的pasv_min_port相对应</span></div><div class="line">-A INPUT -m <span class="keyword">state</span> --state NEW -m tcp -p tcp --dport <span class="number">10060</span>:<span class="number">10090</span> -j ACCEPT</div><div class="line">-A INPUT -j REJECT --reject-with icmp-host-prohibited</div><div class="line">-A FORWARD -j REJECT --reject-with icmp-host-prohibited</div><div class="line">COMMIT</div></pre></td></tr></table></figure></p>
<p>（在vim中按i进入编辑模式才能进行编辑，按esc键退出编辑模式进入命令模式。:wq!保存退出）</p>
<p>启动iptables防火墙<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">systemctl restart iptables<span class="selector-class">.service</span> #最后重启防火墙使配置生效</div><div class="line"></div><div class="line">systemctl enable iptables<span class="selector-class">.service</span> #设置防火墙开机启动</div></pre></td></tr></table></figure></p>
<h3 id="关闭SELINUX"><a href="#关闭SELINUX" class="headerlink" title="关闭SELINUX"></a>关闭SELINUX</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">vi <span class="meta-keyword">/etc/</span>selinux/config</div><div class="line"></div><div class="line"><span class="meta">#SELINUX=enforcing #注释掉</span></div><div class="line"></div><div class="line"><span class="meta">#SELINUXTYPE=targeted #注释掉</span></div><div class="line"></div><div class="line">SELINUX=disabled <span class="meta">#增加</span></div><div class="line"></div><div class="line">:wq! <span class="meta">#保存退出</span></div><div class="line"></div><div class="line">setenforce <span class="number">0</span> <span class="meta">#使配置立即生效</span></div></pre></td></tr></table></figure>
<h3 id="配置vsftp服务器"><a href="#配置vsftp服务器" class="headerlink" title="配置vsftp服务器"></a>配置vsftp服务器</h3><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#备份默认配置文件</span></div><div class="line">cp /etc/vsftpd/vsftpd.conf /etc/vsftpd/vsftpd.conf-bak </div><div class="line"></div><div class="line"><span class="meta">#进入vsftpd配置文件</span></div><div class="line">vim /etc/vsftpd/vsftpd.conf </div><div class="line"><span class="meta"># 禁止匿名用户anonymous登录</span></div><div class="line">anonymous_enable=NO</div><div class="line"><span class="meta"># 允许本地用户登录</span></div><div class="line">local_enable=YES</div><div class="line"><span class="meta"># 让登录的用户有写权限(上传，删除)</span></div><div class="line">write_enable=YES</div><div class="line"><span class="meta"># 默认umask</span></div><div class="line">local_umask=<span class="number">022</span></div><div class="line"><span class="meta"># 把传输记录的日志保存到/var/log/vsftpd.log</span></div><div class="line">xferlog_enable=YES</div><div class="line"><span class="meta">#xferlog_file=/var/log/vsftpd.log</span></div><div class="line">xferlog_std_format=YES</div><div class="line"><span class="meta"># 允许ASCII模式上传</span></div><div class="line"><span class="meta">#ascii_upload_enable=YES </span></div><div class="line"><span class="meta"># 允许ASCII模式下载</span></div><div class="line"><span class="meta">#ascii_download_enable=YES</span></div><div class="line"><span class="meta"># 使用20号端口传输数据</span></div><div class="line">connect_from_port_20=YES</div><div class="line"><span class="meta"># 欢迎标语</span></div><div class="line">ftpd_banner=Welcome to use my test ftp server.</div><div class="line"><span class="meta"># 接下来的三条配置很重要</span></div><div class="line"><span class="meta"># chroot_local_user设置了YES，那么所有的用户默认将被chroot，</span></div><div class="line"><span class="meta"># 也就用户目录被限制在了自己的home下，无法向上改变目录。</span></div><div class="line"><span class="meta"># chroot_list_enable设置了YES，即让chroot用户列表有效。</span></div><div class="line"><span class="meta"># ★超重要：如果chroot_local_user设置了YES，那么chroot_list_file</span></div><div class="line"><span class="meta"># 设置的文件里，是不被chroot的用户(可以向上改变目录)</span></div><div class="line"><span class="meta"># ★超重要：如果chroot_local_user设置了NO，那么chroot_list_file</span></div><div class="line"><span class="meta"># 设置的文件里，是被chroot的用户(无法向上改变目录)</span></div><div class="line">chroot_list_enable=YES</div><div class="line"><span class="meta"># touch /etc/vsftpd/chroot_list 新建</span></div><div class="line"><span class="meta">#chroot_list_file=/etc/vsftpd/chroot_list</span></div><div class="line">use_localtime=YES</div><div class="line"><span class="meta"># 以standalone模式在ipv4上运行</span></div><div class="line">listen=YES</div><div class="line"><span class="meta"># PAM认证服务名，这里默认是vsftpd，在安装vsftpd的时候已经创建了这个pam文件，</span></div><div class="line"><span class="meta"># 在/etc/pam.d/vsftpd，根据这个pam文件里的设置，/etc/vsftpd/ftpusers</span></div><div class="line"><span class="meta"># 文件里的用户将禁止登录ftp服务器，比如root这样敏感的用户，所以你要禁止别的用户</span></div><div class="line"><span class="meta"># 登录的时候，也可以把该用户追加到/etc/vsftpd/ftpusers里。</span></div><div class="line">pam_service_name=vsftpd</div><div class="line"></div><div class="line"><span class="meta">#这个特别重要 不然不能在可读文件夹建立FTP服务器</span></div><div class="line">allow_writeable_chroot=YES</div><div class="line"></div><div class="line"><span class="meta">#</span></div><div class="line">userlist_enable=YES</div><div class="line"><span class="meta">#</span></div><div class="line">tcp_wrappers=YES</div><div class="line"></div><div class="line">listen_port=<span class="number">21</span></div><div class="line"></div><div class="line"><span class="meta">#</span></div><div class="line">guest_enable=YES</div><div class="line"><span class="meta">#</span></div><div class="line">guest_username=ftproot</div><div class="line"></div><div class="line">user_config_dir=/etc/vsftpd/vconf</div><div class="line"><span class="meta">#</span></div><div class="line">virtual_use_local_privs=YES</div><div class="line"></div><div class="line"><span class="meta">#要加上这两个，不然ls命令会报错，这里相当于开启被动通信通道</span></div><div class="line">pasv_min_port=<span class="number">10060</span></div><div class="line"><span class="meta">#</span></div><div class="line">pasv_max_port=<span class="number">10090</span></div><div class="line"></div><div class="line"><span class="meta"># 重启 vsftpd</span></div><div class="line">service vsftpd restart</div></pre></td></tr></table></figure>
<h2 id="新建系统用户ftproot"><a href="#新建系统用户ftproot" class="headerlink" title="新建系统用户ftproot"></a>新建系统用户ftproot</h2><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#使用命令(adduser)添加ftproot用户,不能登录系统(-s /sbin/nologin),自己的文件夹在(-d /home/ftproot))</span></div><div class="line">useradd ftproot -d /home/ftproot -s /sbin/nologin</div><div class="line"><span class="meta">#设置密码</span></div><div class="line">passwd <span class="keyword">virtual</span></div></pre></td></tr></table></figure>
<p>==此时已经可以通过ftproot用户登录ftp服务器了==</p>
<h3 id="为FTP服务器创建虚拟用户"><a href="#为FTP服务器创建虚拟用户" class="headerlink" title="为FTP服务器创建虚拟用户"></a>为FTP服务器创建虚拟用户</h3><h4 id="建立虚拟用户名单文件"><a href="#建立虚拟用户名单文件" class="headerlink" title="建立虚拟用户名单文件"></a>建立虚拟用户名单文件</h4><p>编辑虚拟用户名单文件：（第一行账号，第二行密码，注意：不能使用root做用户名，系统保留）<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">vim /etc/vsftpd/virtusers</div><div class="line"></div><div class="line">guest</div><div class="line"><span class="number">123456</span></div><div class="line">family</div><div class="line"><span class="number">654321</span></div></pre></td></tr></table></figure></p>
<h4 id="生成虚拟用户数据文件"><a href="#生成虚拟用户数据文件" class="headerlink" title="生成虚拟用户数据文件"></a>生成虚拟用户数据文件</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">db_load -T -t hash -f <span class="regexp">/etc/</span>vsftpd<span class="regexp">/virtusers /</span>etc<span class="regexp">/vsftpd/</span>virtusers.db</div><div class="line"></div><div class="line">chmod <span class="number">600</span> <span class="regexp">/etc/</span>vsftpd<span class="regexp">/virtusers.db #设定PAM验证文件，并指定对虚拟用户数据库文件进行读取</span></div></pre></td></tr></table></figure>
<h4 id="在-etc-pam-d-vsftpd的文件头部加入以下信息（在后面加入无效"><a href="#在-etc-pam-d-vsftpd的文件头部加入以下信息（在后面加入无效" class="headerlink" title="在/etc/pam.d/vsftpd的文件头部加入以下信息（在后面加入无效"></a>在/etc/pam.d/vsftpd的文件头部加入以下信息（在后面加入无效</h4><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#修改前先备份 </span></div><div class="line">cp <span class="meta-keyword">/etc/</span>pam.d/vsftpd <span class="meta-keyword">/etc/</span>pam.d/vsftpdbak</div><div class="line"></div><div class="line">vi <span class="meta-keyword">/etc/</span>pam.d/vsftpd</div><div class="line"></div><div class="line">auth sufficient <span class="meta-keyword">/lib64/</span>security/pam_userdb.so db=<span class="meta-keyword">/etc/</span>vsftpd/virtusers</div><div class="line"></div><div class="line">account sufficient <span class="meta-keyword">/lib64/</span>security/pam_userdb.so db=<span class="meta-keyword">/etc/</span>vsftpd/virtusers</div></pre></td></tr></table></figure>
<p>注意：如果系统为32位，上面改为lib，否则配置失败</p>
<h4 id="建立虚拟用户个人Vsftp的配置文件"><a href="#建立虚拟用户个人Vsftp的配置文件" class="headerlink" title="建立虚拟用户个人Vsftp的配置文件"></a>建立虚拟用户个人Vsftp的配置文件</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">mkdir /etc/vsftpd/vconf</div><div class="line"></div><div class="line">cd /etc/vsftpd/vconf</div><div class="line"></div><div class="line">touch ljftp admin <span class="comment">#这里创建三个虚拟用户配置文件</span></div><div class="line"></div><div class="line">mkdir -p /home/ftpRoot/ljftp</div><div class="line"></div><div class="line">vi web1 <span class="comment">#编辑用户web1配置文件，其他的跟这个配置文件类似</span></div><div class="line"></div><div class="line">local_root=/home/ftpRoot/ljftp/</div><div class="line"></div><div class="line">write_enable=YES</div><div class="line"></div><div class="line">anon_world_readable_only=NO</div><div class="line"></div><div class="line">anon_upload_enable=YES</div><div class="line"></div><div class="line">anon_mkdir_write_enable=YES</div><div class="line"></div><div class="line">anon_other_write_enable=YES</div></pre></td></tr></table></figure>
<p>打开虚拟用户的写入文件夹权限</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chown <span class="string">ftproot:</span>ftproot <span class="regexp">/home/</span>ftproot<span class="regexp">/guest/</span></div><div class="line">chown <span class="string">ftproot:</span>ftproot <span class="regexp">/home/</span>ftproot<span class="regexp">/family/</span></div></pre></td></tr></table></figure>
<p>==至此,可以使用虚拟用户guest和family登陆ftp==</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[UITableView]]></title>
      <url>https://liujingh.github.io/2016/10/08/iOS%E5%BC%80%E5%8F%91/UIKit/TableView%E5%92%8CTableViewCell%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h2 id="UITableView的原理"><a href="#UITableView的原理" class="headerlink" title="UITableView的原理"></a>UITableView的原理</h2><p><img src="http://note.youdao.com/yws/api/personal/file/WEB49c6696c7b4c3512d95338e968d07af5?method=download&amp;inline=true&amp;shareKey=4ae12deaaa0b3037b868a1472bf08949" alt="image"></p>
<h2 id="UITableView的相关方法和属性"><a href="#UITableView的相关方法和属性" class="headerlink" title="UITableView的相关方法和属性"></a>UITableView的相关方法和属性</h2><h3 id="UITableViewDelegate方法"><a href="#UITableViewDelegate方法" class="headerlink" title="UITableViewDelegate方法"></a>UITableViewDelegate方法</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置列表项高度</span></div><div class="line">- (<span class="built_in">CGFloat</span>)tableView:(<span class="built_in">UITableView</span> *)tableView heightForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath;</div><div class="line"><span class="comment">//设置段头视图高度</span></div><div class="line">- (<span class="built_in">CGFloat</span>)tableView:(<span class="built_in">UITableView</span> *)tableView heightForHeaderInSection:(<span class="built_in">NSInteger</span>)section;</div><div class="line"><span class="comment">//设置段尾视图高度</span></div><div class="line">- (<span class="built_in">CGFloat</span>)tableView:(<span class="built_in">UITableView</span> *)tableView heightForFooterInSection:(<span class="built_in">NSInteger</span>)section;</div><div class="line"><span class="comment">//设置段头视图</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">UIView</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView viewForHeaderInSection:(<span class="built_in">NSInteger</span>)section;</div><div class="line"><span class="comment">//设置段尾视图</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">UIView</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView viewForFooterInSection:(<span class="built_in">NSInteger</span>)section;</div><div class="line"><span class="comment">//选中列表项时执行</span></div><div class="line">- (<span class="keyword">void</span>)tableView:(<span class="built_in">UITableView</span> *)tableView didSelectRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath;</div><div class="line"><span class="comment">//失去选中列表项时执行</span></div><div class="line">- (<span class="keyword">void</span>)tableView:(<span class="built_in">UITableView</span> *)tableView didDeselectRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath;</div></pre></td></tr></table></figure>
<h3 id="UITableViewDataSource方法"><a href="#UITableViewDataSource方法" class="headerlink" title="UITableViewDataSource方法"></a>UITableViewDataSource方法</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置每个段有多少行</span></div><div class="line">- (<span class="built_in">NSInteger</span>)tableView:(<span class="built_in">UITableView</span> *)tableView numberOfRowsInSection:(<span class="built_in">NSInteger</span>)section;</div><div class="line"><span class="comment">//设置每个列表项的内容</span></div><div class="line">- (<span class="built_in">UITableViewCell</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath;</div><div class="line"><span class="comment">//设置有多少段</span></div><div class="line">- (<span class="built_in">NSInteger</span>)numberOfSectionsInTableView:(<span class="built_in">UITableView</span> *)tableView;</div><div class="line"><span class="comment">//以字符串的形式设置段头视图</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView titleForHeaderInSection:(<span class="built_in">NSInteger</span>)section; </div><div class="line"><span class="comment">//以字符串的形式设置段头视图</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView titleForFooterInSection:(<span class="built_in">NSInteger</span>)section;</div></pre></td></tr></table></figure>
<h3 id="UITableView方法"><a href="#UITableView方法" class="headerlink" title="UITableView方法"></a>UITableView方法</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//跳转到个列表项</span></div><div class="line">- (<span class="keyword">void</span>)<span class="string">scrollToRowAtIndexPath:</span>(NSIndexPath *)indexPath <span class="string">atScrollPosition:</span>(UITableViewScrollPosition)scrollPosition <span class="string">animated:</span>(BOOL)animated;</div></pre></td></tr></table></figure>
<h3 id="UITableView常用属性"><a href="#UITableView常用属性" class="headerlink" title="UITableView常用属性"></a>UITableView常用属性</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置分割线样式</span></div><div class="line">tableView.separatorStyle = <span class="built_in">UITableViewCellSeparatorStyleNone</span>;</div></pre></td></tr></table></figure>
<h2 id="UITableViewCell"><a href="#UITableViewCell" class="headerlink" title="UITableViewCell"></a>UITableViewCell</h2><h3 id="UITableViewCell的创建"><a href="#UITableViewCell的创建" class="headerlink" title="UITableViewCell的创建"></a>UITableViewCell的创建</h3><p><img src="http://note.youdao.com/yws/api/personal/file/WEB10a13d46697da4d76677b20ac155f86f?method=download&amp;inline=true&amp;shareKey=4d8a1161350dc2c901e9fa1021aaaff7" alt="UITableViewCell复用"></p>
<p>先从tableView的复用队列获取，如果获取不到Cell,再进行创建。这时分两种情况</p>
<ol>
<li>系统注册</li>
</ol>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取</span></div><div class="line">- (__kindof <span class="built_in">UITableViewCell</span> *)dequeueReusableCellWithIdentifier:(<span class="built_in">NSString</span> *)identifier forIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0);</div><div class="line"><span class="comment">//注册</span></div><div class="line"><span class="comment">//NIB方式注册 要配合UINib使用，目前使用NSBundle 的 loadNibNamed 方法注册不了</span></div><div class="line">+ (<span class="built_in">UINib</span> *)nibWithNibName:(<span class="built_in">NSString</span> *)name bundle:(<span class="keyword">nullable</span> <span class="built_in">NSBundle</span> *)bundleOrNil;</div><div class="line">- (<span class="keyword">void</span>)registerNib:(<span class="keyword">nullable</span> <span class="built_in">UINib</span> *)nib forCellReuseIdentifier:(<span class="built_in">NSString</span> *)identifier <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">5</span>_0);</div><div class="line"><span class="comment">//代码方式注册</span></div><div class="line">- (<span class="keyword">void</span>)registerClass:(<span class="keyword">nullable</span> Class)cellClass forCellReuseIdentifier:(<span class="built_in">NSString</span> *)identifier <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">6</span>_0);</div></pre></td></tr></table></figure>
<ol>
<li>自己创建</li>
</ol>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取</span></div><div class="line">- (<span class="keyword">nullable</span> __kindof <span class="built_in">UITableViewCell</span> *)dequeueReusableCellWithIdentifier:(<span class="built_in">NSString</span> *)identifier;</div><div class="line"><span class="comment">//创建</span></div><div class="line"><span class="keyword">if</span>(!cell)&#123;</div><div class="line">cell = [[<span class="built_in">UITableViewCell</span> alloc] initWithStyle:<span class="built_in">UITableViewCellStyleDefault</span> reuseIdentifier:<span class="string">@"Cell"</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="系统提供的四种UITableViewCell的样式"><a href="#系统提供的四种UITableViewCell的样式" class="headerlink" title="系统提供的四种UITableViewCell的样式"></a>系统提供的四种UITableViewCell的样式</h3><ol>
<li>UITableViewCellStyleDefault</li>
</ol>
<p><img src="http://note.youdao.com/yws/api/personal/file/WEB33079ef4c1570958d6785a1e93b89ced?method=download&amp;inline=true&amp;shareKey=e34f7927ef4e889f1721117b3312f29c" alt="image"></p>
<ol>
<li>UITableViewCellStyleValue1</li>
</ol>
<p><img src="http://note.youdao.com/yws/api/personal/file/WEBcdf8ae4e865e23756c16e78c9961fa26?method=download&amp;inline=true&amp;shareKey=69994d0a2f46dcb381e05fc9e2cd9a14" alt="image"></p>
<ol>
<li>UITableViewCellStyleValue2</li>
</ol>
<p><img src="http://note.youdao.com/yws/api/personal/file/WEB4e201fa1ad20108c49acba6f98bcb0d7?method=download&amp;inline=true&amp;shareKey=9c75f6b51a783dff6f381ae2bfdef40b" alt="image"></p>
<ol>
<li>UITableViewCellStyleSubtitle</li>
</ol>
<p><img src="http://note.youdao.com/yws/api/personal/file/WEBdac6c6ffe58828853e427b69c75b5730?method=download&amp;inline=true&amp;shareKey=ad5ff565794f0decbd9469dde03f8911" alt="image"></p>
<h3 id="cell自动高度"><a href="#cell自动高度" class="headerlink" title="cell自动高度"></a>cell自动高度</h3><p>方法1<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//根据内容设置 cell 的高度</span></div><div class="line"><span class="comment">//设定一个cell高度的预估值，这个随意，执行为了让系统能先预定tableview的整体高度</span></div><div class="line"><span class="keyword">self</span>.tableView.estimatedRowHeight = <span class="number">70</span>;</div><div class="line"><span class="comment">//设置tableView的行高实际高度要根据自动布局产生的高度决定 （注意动态行高，必须配合自动布局使用）</span></div><div class="line"><span class="keyword">self</span>.tableView.rowHeight = <span class="built_in">UITableViewAutomaticDimension</span>;</div></pre></td></tr></table></figure></p>
<p>方法2</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//下方代码表示: 让TableView根据cell的内容自动猜测cell的高度.</span></div><div class="line"><span class="comment">//这个猜测依赖于AutoLayout机制, cell内容必须能够关联cell的高度才可以!!!</span></div><div class="line"><span class="comment">//estimate:猜测</span></div><div class="line">-(<span class="built_in">CGFloat</span>)tableView:(<span class="built_in">UITableView</span> *)tableView estimatedHeightForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath&#123;</div><div class="line"><span class="comment">//Dimension 尺寸</span></div><div class="line"><span class="keyword">return</span> <span class="built_in">UITableViewAutomaticDimension</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="cell的常用属性记录"><a href="#cell的常用属性记录" class="headerlink" title="cell的常用属性记录"></a>cell的常用属性记录</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置cell的选中样式</span></div><div class="line">cell.selectionStyle = <span class="built_in">UITableViewCellSelectionStyleNone</span>;</div><div class="line"></div><div class="line"><span class="comment">//去掉分割线左侧的空间 在cell的初始化方法中设置为好，不能在使用cell的contentView之后设置</span></div><div class="line"><span class="keyword">self</span>.separatorInset = <span class="built_in">UIEdgeInsetsZero</span>;</div><div class="line"><span class="keyword">self</span>.layoutMargins = <span class="built_in">UIEdgeInsetsZero</span>;</div><div class="line"><span class="comment">//苹果程序员的.h注释写错了, 默认是YES, 根据打印得到</span></div><div class="line"><span class="keyword">self</span>.preservesSuperviewLayoutMargins = <span class="literal">NO</span>;</div></pre></td></tr></table></figure>
<h2 id="UITableView的使用技巧"><a href="#UITableView的使用技巧" class="headerlink" title="UITableView的使用技巧"></a>UITableView的使用技巧</h2><h3 id="Cell取消选中样式"><a href="#Cell取消选中样式" class="headerlink" title="Cell取消选中样式"></a>Cell取消选中样式</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//选中马上取消，可以看到选中效果</span></div><div class="line">-(<span class="keyword">void</span>)tableView:(<span class="built_in">UITableView</span> *)tableView didSelectRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath&#123;</div><div class="line">[tableView deselectRowAtIndexPath:indexPath animated:<span class="literal">YES</span>];</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//直接取消，完全没有选中效果</span></div><div class="line"><span class="keyword">self</span>.selectionStyle = <span class="built_in">UITableViewCellSelectionStyleNone</span>;</div></pre></td></tr></table></figure>
<h2 id="UITableView的坑点"><a href="#UITableView的坑点" class="headerlink" title="UITableView的坑点"></a>UITableView的坑点</h2><h3 id="ForHeaderInSection-方法不调用？"><a href="#ForHeaderInSection-方法不调用？" class="headerlink" title="ForHeaderInSection 方法不调用？"></a>ForHeaderInSection 方法不调用？</h3><p>原因是没有设置HeaderInSection的高度。如果使用NIB创建的UITableView，NIB会自动设置这个高度。如果使用春代码方式，则需要使用heightForHeaderInSection方法设置高度之后，就可以调用viewForHeaderInSection方法</p>
<h3 id="获取在可视区域的Cell"><a href="#获取在可视区域的Cell" class="headerlink" title="获取在可视区域的Cell"></a>获取在可视区域的Cell</h3><figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//UITableview的方法，这个最直接，返回一个UITableviewcell的数组。</span></div><div class="line">对于自定制的cell，之后的处理可能稍微繁琐些。</div><div class="line">- <span class="comment">(NSArray*)</span>visibleCells;</div></pre></td></tr></table></figure>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//UITableview的一个方法，这个比较好用了，返回一个NSIndexPath的数组。</span></div><div class="line"><span class="comment">//可以直接用indexpath.row去调你的table_related_Array里的数据了。比较方便用于自定制的cell。</span></div><div class="line"><span class="selector-tag">-</span> (NSArray*)<span class="selector-tag">indexPathsForVisibleRows</span>;</div></pre></td></tr></table></figure>
<figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- <span class="params">(CGRect)</span>rectForRowAtIndexPath:<span class="params">(NSIndexPath*)</span>indexPath;</div></pre></td></tr></table></figure>
<h3 id="TableView顶部和底部有空白条"><a href="#TableView顶部和底部有空白条" class="headerlink" title="TableView顶部和底部有空白条"></a>TableView顶部和底部有空白条</h3><p>像这样</p>
<p><img src="http://note.youdao.com/yws/api/personal/file/WEB5fad1decebcba2c6d817b0311f6a1956?method=download&amp;inline=true&amp;shareKey=b29f31222e9fb70118339dc9352495a6" alt="TableView顶部空白"></p>
<p>或这样</p>
<p><img src="http://note.youdao.com/yws/api/personal/file/WEBd58c705384f9b2479fc811fa55830e89?method=download&amp;inline=true&amp;shareKey=fbfcf3ebd7ccc8f9a77fc82f704c5e64" alt="TableView底部空白"></p>
<p>出现这个问题的原因是：</p>
<p>这个属性背的锅<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Defaults to YES</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">assign</span>) <span class="built_in">BOOL</span> automaticallyAdjustsScrollViewInsets <span class="built_in">NS_AVAILABLE_IOS</span>(<span class="number">7</span>_0);</div></pre></td></tr></table></figure></p>
<p>automaticallyAdjustsScrollViewInsets用于设置ViewController是否自动调整他的scroll View insets。默认为YES,表示允许ViewController自动调整由于适用scroll View 而生成的各种navigation bar,status bar,tool bar和tab bar.也就是说在默认情况下ViewController会为用户自动调整ScrollView及其子类，已适用ViewController上面的各种Bar</p>
<p>解决方法：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">self</span>.edgesForExtendedLayout = <span class="built_in">UIRectEdgeBottom</span>;</div><div class="line"><span class="keyword">self</span>.automaticallyAdjustsScrollViewInsets = <span class="literal">NO</span>;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[登录界面]]></title>
      <url>https://liujingh.github.io/2016/10/08/iOS%E5%BC%80%E5%8F%91/Demo/LoginVC/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>这个Demo做了一个富有创意的登录界面，好玩也好看。</p>
<p><a href="http://note.youdao.com/noteshare?id=5b087a09f114217600453e77b0fe9fb0" target="_blank" rel="external">有道云笔记下载Demo</a></p>
<p><img src="http://note.youdao.com/yws/api/personal/file/WEBc83252c42992880bf40f03aeea43edc1?method=download&amp;inline=true&amp;shareKey=4c37885998d7e4aa7645892f0ded0bc1" alt="图示"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS多线程]]></title>
      <url>https://liujingh.github.io/2016/10/08/iOS%E5%BC%80%E5%8F%91/iOS%20%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h2 id="IOS提供的处理多线程的方式一共分为4种，分别是："><a href="#IOS提供的处理多线程的方式一共分为4种，分别是：" class="headerlink" title="IOS提供的处理多线程的方式一共分为4种，分别是："></a>IOS提供的处理多线程的方式一共分为4种，分别是：</h2><ul>
<li>pThread：最早期，纯C的，兼容所有C语言基础的代码</li>
<li>NSThread：本质上是使用OC对pThread的一个封装，是早期IOS使用的多线程</li>
<li>GCD（Grand Central Dispatch）：使用C语言+block语法，目前为止苹果主推的多线程技术，功能强大，效率高</li>
<li>NSOperationQueue: 使用OC对于GCD的一个封装, 在GCD基础上额外增加了几个特性, 不过效率没有GCD高.</li>
</ul>
<h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>当应用程序从硬盘上被拷贝到内存中, 运行起来以后, 就称为一个进程, 即进行中的程序.</p>
<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>线程（thread）是组成进程的子单元，操作系统的调度器可以对线程进行单独的调度。实际上，所有的并发编程 API 都是构建于线程之上的. </p>
<p>多线程可以在单核 CPU 上同时（或者至少看作同时）运行。操作系统将小的时间片分配给每一个线程，这样就能够让用户感觉到有多个任务在同时进行。如果 CPU 是多核的，那么线程就可以真正的以并发方式被执行，从而减少了完成某项操作所需要的总时间. </p>
<p>一个线程同一时间只能做一件事.<br>如果一件事没做完, 又给线程安排其他的任务. 则排队</p>
<p>线程的生命:<br>线程开启以后, 如果线程上的任务结束以后, 线程就会自动关闭掉.</p>
<p>比喻: 线程是一条跑道, 任务是跑道上的赛车, 赛车跑到路的尽头就会撞毁. 那么跑道就没有存在的必要了.</p>
<h2 id="主线程与子线程"><a href="#主线程与子线程" class="headerlink" title="主线程与子线程"></a>主线程与子线程</h2><p>主线程:优先级最高的, 当CPU资源有限时,会优先进行主线程上的任务. </p>
<p>主线程: 是一个圆形的跑道, 车是在上面绕圈跑的.<br>这个设计被称为 runloop  运行环</p>
<p>主要思路是在 线程中写了一行代码<br>while(YES){</p>
<p>}</p>
<blockquote>
<p>苹果规定所有能被用户察觉的操作, 都应该放到主线程上, 所有UI视图都应该在主线程中执行</p>
</blockquote>
<p>子线程:优先级次于主线程, 无法被用户察觉的的操作都可以放到子线程中执行</p>
<h2 id="异步、同步和并发、串行"><a href="#异步、同步和并发、串行" class="headerlink" title="异步、同步和并发、串行"></a>异步、同步和并发、串行</h2><blockquote>
<p>异步：异于当前方法所在线程  async</p>
<p>同步：同于当前方法所在线程 sync</p>
<p>串行：任务按顺序执行 seral</p>
<p>并行：任务没有顺序，同时执行 concurrent</p>
</blockquote>
<p><img src="http://note.youdao.com/yws/api/personal/file/WEB22df0e96cc04716c6753bf96b18c2a32?method=download&amp;inline=true&amp;shareKey=1a0ba493e5b70f060c5e6d425f9ce570" alt="image"></p>
<p><img src="http://note.youdao.com/yws/api/personal/file/WEB847fbf598e11a8faff81a64bd6c71231?method=download&amp;inline=true&amp;shareKey=a101fd01c9caa97005e5f288f5906b87" alt="image"></p>
<h2 id="NSThraed"><a href="#NSThraed" class="headerlink" title="NSThraed"></a>NSThraed</h2><p>开始线程</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//方式1 在后台线程执行方法</span></div><div class="line">[<span class="keyword">self</span> performSelectorInBackground:<span class="keyword">@selector</span>(wasteTime) withObject:<span class="literal">nil</span>];</div><div class="line"></div><div class="line"><span class="comment">//方式2: 和方式1 木有任何区别</span></div><div class="line">[<span class="built_in">NSThread</span> detachNewThreadSelector:<span class="keyword">@selector</span>(wasteTime) toTarget:<span class="keyword">self</span> withObject:<span class="literal">nil</span>];</div><div class="line"></div><div class="line"><span class="comment">//方式3: 方式2和方式1不能给线程命名，但方式3可以</span></div><div class="line"><span class="built_in">NSThread</span> *thread = [[<span class="built_in">NSThread</span> alloc] initWithTarget:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(wasteTime) object:<span class="literal">nil</span>];</div><div class="line">thread.name = <span class="string">@"1606"</span>;</div><div class="line">[thread start];<span class="comment">//必须手动开启</span></div></pre></td></tr></table></figure>
<p>获取当前线程</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//[NSThread currentThread]: 获取当前方法所在的线程</span></div><div class="line"><span class="comment">//number=1 代表主线程, 其他都是子线程</span></div><div class="line"><span class="selector-attr">[NSThread currentThread]</span></div></pre></td></tr></table></figure>
<blockquote>
<p><nsthread: 0x7fd132f010e0="">{number = 1, name = main}</nsthread:></p>
<p><nsthread: 0x7fd132f09780="">{number = 2, name = 1606}</nsthread:></p>
</blockquote>
<p>返回主线程</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//从子线程回归主线程,规避掉线程不安全的操作</span></div><div class="line">[<span class="keyword">self</span> performSelectorOnMainThread:<span class="keyword">@selector</span>(changeUI) withObject:<span class="literal">nil</span> waitUntilDone:<span class="literal">NO</span>];</div><div class="line"><span class="comment">//waitUntilDone:表示是否要等待changeUI这个方法执行结束以后, 才继续执行下方代码</span></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"--------------------"</span>);</div></pre></td></tr></table></figure>
<p>结束线程</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[NSThread <span class="keyword">exit</span>]; <span class="regexp">//</span>结束当前线程</div></pre></td></tr></table></figure>
<h2 id="GCD"><a href="#GCD" class="headerlink" title="GCD"></a>GCD</h2><p>获取线程</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//主线程</span></div><div class="line"><span class="keyword">dispatch_queue_t</span> mainDispatchQueue = dispatch_get_main_queue();</div></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取子线程</span></div><div class="line">dispatch_get_global_queue(<span class="keyword">long</span> identifier, <span class="keyword">unsigned</span> <span class="keyword">long</span> flags);</div></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//最高</span></div><div class="line"><span class="keyword">dispatch_queue_t</span> globalDispatchQueueHigh =  dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, <span class="number">0</span>);</div><div class="line"><span class="comment">//默认</span></div><div class="line"><span class="keyword">dispatch_queue_t</span> golbalDispatchQueueDefault = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);</div><div class="line"><span class="comment">//低</span></div><div class="line"><span class="keyword">dispatch_queue_t</span> golbalDispatchQueueLow = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_LOW, <span class="number">0</span>);</div><div class="line"><span class="comment">//后台</span></div><div class="line"><span class="keyword">dispatch_queue_t</span> golbalDispatchQueueBackground = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, <span class="number">0</span>);</div></pre></td></tr></table></figure>
<p>GCD的使用</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//dispatch_get_global_queue获取全局队列, 参数1代表优先级, 0是默认优先级. 参数2 无用</span></div><div class="line"><span class="selector-tag">dispatch_async</span>(dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>), ^&#123;</div><div class="line"><span class="comment">//子线程执行区域</span></div><div class="line"></div><div class="line"><span class="comment">//dispatch_get_main_queue() 主队列</span></div><div class="line"><span class="selector-tag">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line"><span class="comment">//主线程执行区域，负责刷新子线程中的数据</span></div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>组线程使用<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">[[<span class="built_in">UIApplication</span> sharedApplication] setNetworkActivityIndicatorVisible:<span class="literal">YES</span>];</div><div class="line"></div><div class="line"><span class="comment">//方法1    </span></div><div class="line"><span class="comment">//我们可以把多个子线程放到一个分组中，通过监听此分组的情况来决定一些操作</span></div><div class="line">dispatch_group_t group = dispatch_group_create();</div><div class="line">[imagePaths enumerateObjectsUsingBlock:^(<span class="keyword">id</span>  _Nonnull obj, <span class="built_in">NSUInteger</span> idx, <span class="built_in">BOOL</span> * _Nonnull stop) &#123;</div><div class="line"><span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:obj];</div><div class="line"></div><div class="line">dispatch_group_async(group, dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>), ^&#123;</div><div class="line"><span class="built_in">NSData</span> *data = [<span class="built_in">NSData</span> dataWithContentsOfURL:url];</div><div class="line"><span class="built_in">UIImage</span> *image = [<span class="built_in">UIImage</span> imageWithData:data];</div><div class="line"></div><div class="line"><span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line"><span class="keyword">self</span>.imageViews[idx].image = image;</div><div class="line">&#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">&#125;];</div><div class="line"></div><div class="line"><span class="comment">//监听分组中的线程都执行结束的时机</span></div><div class="line">dispatch_group_notify(group, dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>), ^&#123;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">[[<span class="built_in">UIApplication</span> sharedApplication] setNetworkActivityIndicatorVisible:<span class="literal">NO</span>];</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//方法2</span></div><div class="line"><span class="comment">//barrier （墙）:必须加到自建队列中。</span></div><div class="line"><span class="built_in">dispatch_queue_t</span> queue = dispatch_queue_create(<span class="literal">NULL</span>,   DISPATCH_QUEUE_CONCURRENT);</div><div class="line">[[<span class="built_in">UIApplication</span> sharedApplication] setNetworkActivityIndicatorVisible:<span class="literal">YES</span>];</div><div class="line">[imagePaths enumerateObjectsUsingBlock:^(<span class="keyword">id</span>  _Nonnull obj, <span class="built_in">NSUInteger</span> idx, <span class="built_in">BOOL</span> * _Nonnull stop) &#123;</div><div class="line"><span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:obj];</div><div class="line"></div><div class="line"><span class="built_in">dispatch_async</span>(queue, ^&#123;</div><div class="line"><span class="built_in">NSData</span> *data = [<span class="built_in">NSData</span> dataWithContentsOfURL:url];</div><div class="line"><span class="built_in">UIImage</span> *img = [<span class="built_in">UIImage</span> imageWithData:data];</div><div class="line"><span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line"><span class="keyword">self</span>.imageViews[idx].image = img;</div><div class="line">&#125;);</div><div class="line">&#125;);</div><div class="line">&#125;];</div><div class="line"><span class="comment">//在自建的并行队列中添加墙，墙只有在并行队列中的所有任务都执行结束后，才会被推倒</span></div><div class="line">dispatch_barrier_async(queue, ^&#123;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">[[<span class="built_in">UIApplication</span> sharedApplication] setNetworkActivityIndicatorVisible:<span class="literal">NO</span>];</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>多线程单例</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//线程安全方法  只会执行一次</span></div><div class="line"><span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</div><div class="line"><span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</div><div class="line"></div><div class="line">sleep(<span class="number">1</span>);</div><div class="line">s = [MySingle new];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@ 正在初始化"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="NSOperation"><a href="#NSOperation" class="headerlink" title="NSOperation"></a>NSOperation</h2><p>NSOperation 就是 使用OC语法 对GCD做的封装， 效率上略低（可以忽略不计），继续如何选择 看个人喜好</p>
<p>NSOperationQueue ：队列</p>
<p>NSOperation : 任务</p>
<p>‘任务’ 存放在 ‘队列’ 中，‘队列’ 存放在 ‘线程’ 中</p>
<p>创建线程</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//主线程</span></div><div class="line">[<span class="built_in">NSOperationQueue</span> mainQueue]</div><div class="line"><span class="comment">//子线程 默认</span></div><div class="line"><span class="built_in">NSOperationQueue</span> *queue = [<span class="built_in">NSOperationQueue</span> new];</div></pre></td></tr></table></figure>
<p>NSOperation 的使用</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSOperationQueue</span> *queue = [<span class="built_in">NSOperationQueue</span> new];</div><div class="line"></div><div class="line"><span class="built_in">NSOperation</span> *op0 = [<span class="built_in">NSBlockOperation</span> blockOperationWithBlock:^&#123;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"op0 开始，%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">sleep(<span class="number">2</span>);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"op0 结束, %@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">&#125;];</div><div class="line"></div><div class="line"><span class="built_in">NSOperation</span> *op1 = [<span class="built_in">NSBlockOperation</span> blockOperationWithBlock:^&#123;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"op1 开始，%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">sleep(<span class="number">2</span>);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"op1 结束, %@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">&#125;];</div><div class="line"></div><div class="line"><span class="built_in">NSOperation</span> *op2 = [<span class="built_in">NSBlockOperation</span> blockOperationWithBlock:^&#123;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"op2 开始，%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">sleep(<span class="number">2</span>);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"op2 结束, %@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">&#125;];</div><div class="line"></div><div class="line"><span class="built_in">NSOperation</span> *op3 = [<span class="built_in">NSBlockOperation</span> blockOperationWithBlock:^&#123;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"op3 开始，%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">sleep(<span class="number">2</span>);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"op3 结束, %@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">&#125;];</div><div class="line"></div><div class="line"><span class="built_in">NSOperation</span> *op4 = [<span class="built_in">NSBlockOperation</span> blockOperationWithBlock:^&#123;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"op4 开始，%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">sleep(<span class="number">2</span>);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"op4 结束, %@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">&#125;];</div><div class="line"></div><div class="line"><span class="built_in">NSOperation</span> *op5 = [<span class="built_in">NSBlockOperation</span> blockOperationWithBlock:^&#123;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"op5 开始，%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">sleep(<span class="number">2</span>);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"op5 结束, %@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">&#125;];</div><div class="line"></div><div class="line"><span class="built_in">NSOperation</span> *op6 = [<span class="built_in">NSBlockOperation</span> blockOperationWithBlock:^&#123;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"op6 开始，%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">sleep(<span class="number">2</span>);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"op6 结束, %@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">&#125;];</div><div class="line"></div><div class="line"><span class="built_in">NSOperation</span> *op7 = [<span class="built_in">NSBlockOperation</span> blockOperationWithBlock:^&#123;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"op7 开始，%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">sleep(<span class="number">2</span>);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"op7 结束, %@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">&#125;];</div><div class="line"></div><div class="line"><span class="built_in">NSOperation</span> *op8 = [<span class="built_in">NSBlockOperation</span> blockOperationWithBlock:^&#123;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"op8 开始，%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">sleep(<span class="number">2</span>);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"op8 结束, %@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">&#125;];</div><div class="line"></div><div class="line"><span class="built_in">NSOperation</span> *op9 = [<span class="built_in">NSBlockOperation</span> blockOperationWithBlock:^&#123;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"op9 开始，%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">sleep(<span class="number">2</span>);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"op9 结束, %@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">&#125;];</div><div class="line"></div><div class="line"><span class="comment">//以为单线程cpu（硬件 ），开始多线程是伪多线程，就是把cpu的线程分很多时间片，每个时间片做一件事，因为速度太快了，所以显得跟多线程一样</span></div><div class="line"><span class="comment">//最佳的线程数量是3—5个</span></div><div class="line"></div><div class="line"><span class="comment">//NSOperation 就是提供了最大并发数量的属性，此属性必须在任务添加到队列'之前'写才有用！</span></div><div class="line">queue.maxConcurrentOperationCount = <span class="number">3</span>;</div><div class="line"></div><div class="line"><span class="comment">//规定线程依赖，比如a必须等b线程做完才能进行</span></div><div class="line"><span class="comment">//op0 必须等 op7 和 op9 执行完毕，才能执行</span></div><div class="line">[op0 addDependency:op7];</div><div class="line">[op0 addDependency:op9];</div><div class="line"></div><div class="line"><span class="comment">//任务添加到队列中之后，任务就会自动执行</span></div><div class="line"><span class="comment">//    [queue addOperation:op0];</span></div><div class="line"></div><div class="line"><span class="comment">//waitUntilFinished: 参数表示，下方的打印方法是否要等待队列中的任务执行结束之后，在运行</span></div><div class="line">[queue addOperations:@[op0,op1,op2,op3,op4,op5,op6,op7,op8,op9] waitUntilFinished:<span class="literal">NO</span>];</div><div class="line"></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"&gt;&gt;&gt;&gt;&gt;&gt;&gt;"</span>);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//取消线程中所有任务：已经执行的任务无法取消</span></div><div class="line"><span class="comment">//    [queue cancelAllOperations];</span></div><div class="line"></div><div class="line"><span class="comment">//取消个别任务，已经执行的任务无法取消</span></div><div class="line">[op2 cancel];  <span class="comment">//</span></div><div class="line">[op9 cancel];  <span class="comment">//0依赖9 9 被取消 0不再依赖9</span></div><div class="line"></div><div class="line"><span class="comment">//暂停，已经运行的任务 无法暂停</span></div><div class="line">[queue setSuspended:<span class="literal">YES</span>];</div><div class="line">sleep(<span class="number">10</span>);</div><div class="line">[queue setSuspended:<span class="literal">NO</span>];</div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//[NSOperationQueue new] 自动开启子线程</span></div><div class="line">[[<span class="built_in">NSOperationQueue</span> new] addOperationWithBlock:^&#123;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"[[NSOperationQueue new], %@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line"><span class="comment">//回归主线程</span></div><div class="line">[[<span class="built_in">NSOperationQueue</span> mainQueue] addOperationWithBlock:^&#123;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"[[NSOperationQueue mainQueue], %@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">&#125;];</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h2 id="线程锁"><a href="#线程锁" class="headerlink" title="线程锁"></a>线程锁</h2><figure class="highlight cos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">property</span> (nonatomic) NSLock *<span class="keyword">lock</span><span class="comment">;</span></div><div class="line"></div><div class="line">[self.<span class="keyword">lock</span> <span class="keyword">lock</span>]<span class="comment">;</span></div><div class="line"><span class="comment">//线程所安全执行区域</span></div><div class="line"></div><div class="line">[self.<span class="keyword">lock</span> unlock]<span class="comment">;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[UIAlertController]]></title>
      <url>https://liujingh.github.io/2016/10/08/iOS%E5%BC%80%E5%8F%91/UIKit/UIViewController/UIAlertController/</url>
      <content type="html"><![CDATA[<h2 id="UIAlertController简介"><a href="#UIAlertController简介" class="headerlink" title="UIAlertController简介"></a>UIAlertController简介</h2><p>UIAlertController是IOS8推出的警示框，UIAlerView已经被苹果官方弃用了（虽然弃用，但还是可以使用，只是更推荐你使用UIAlertController）。UIAlertController相比UIAlertView，使用方法更加简洁明了，但使用局限也更大一些。</p>
<p><a href="http://note.youdao.com/noteshare?id=f5b8437b11c8a1ae22d8992364c770af" target="_blank" rel="external">Demo下载</a></p>
<h2 id="UIAlertController使用说明"><a href="#UIAlertController使用说明" class="headerlink" title="UIAlertController使用说明"></a>UIAlertController使用说明</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//类方法</div><div class="line">//title 标题  message 警告信息  preferredStyle 显示样式</div><div class="line">+ (instance<span class="keyword">type</span>)alertControllerWithTitle:(nullable <span class="type">NSString</span> *)title message:(nullable <span class="type">NSString</span> *)message preferredStyle:(<span class="type">UIAlertControllerStyle</span>)preferredStyle;</div></pre></td></tr></table></figure>
<p>显示样式有两种，示例如下：</p>
<p><strong>UIAlertControllerStyleActionSheet</strong></p>
<p><img src="http://note.youdao.com/yws/api/personal/file/WEBa705562a575dcffc5c774d4f47f38b36?method=download&amp;inline=true&amp;shareKey=59cbbb6f62824ad7001d971e5f844077" alt="UIAlertControllerStyleActionSheet"></p>
<p><strong>UIAlertControllerStyleAlert</strong></p>
<p>当按钮超过三个时，按钮的排列方向会改变为纵向排列</p>
<p><img src="http://note.youdao.com/yws/api/personal/file/WEB1a899d6c58750890d9479c33efc900a4?method=download&amp;inline=true&amp;shareKey=e8c66bfc02c0249f582219bce0001c4a" alt="UIAlertControllerStyleAlert"></p>
<h3 id="向UIAlertController中添加UIAlertAction"><a href="#向UIAlertController中添加UIAlertAction" class="headerlink" title="向UIAlertController中添加UIAlertAction"></a>向UIAlertController中添加UIAlertAction</h3><p>UIAlertAction其实就是在警告框中看到的按钮，</p>
<h4 id="UIAlertAction初始化"><a href="#UIAlertAction初始化" class="headerlink" title="UIAlertAction初始化"></a>UIAlertAction初始化</h4><figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//title 按钮名称 style 按钮样式 handler 点击按钮要处理的事情</div><div class="line">+ (instance<span class="keyword">type</span>)actionWithTitle:(nullable <span class="type">NSString</span> *)title style:(<span class="type">UIAlertActionStyle</span>)style handler:(void (^ __nullable)(<span class="type">UIAlertAction</span> *action))handler;</div></pre></td></tr></table></figure>
<p>UIAlertAction的样式有三种：</p>
<p><img src="http://note.youdao.com/yws/api/personal/file/WEB4fac04263f6484a940d9ba6383a12c5e?method=download&amp;inline=true&amp;shareKey=0eeae452d6492a13b3814190447340a8" alt="image"></p>
<p><strong>UIAlertActionStyleDefault 默认</strong></p>
<p>默认样式总会在最顶部显示</p>
<p><strong>UIAlertActionStyleCancel 放弃</strong></p>
<p>放弃样式总会选择总会选择最低部或左边显示</p>
<p><strong>UIAlertActionStyleDestructive 删除</strong></p>
<p>删除样式总会以红色来提醒用户</p>
<h4 id="添加UIAlertAction"><a href="#添加UIAlertAction" class="headerlink" title="添加UIAlertAction"></a>添加UIAlertAction</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)<span class="string">addAction:</span>(UIAlertAction *)action</div><div class="line"><span class="comment">//示例</span></div><div class="line">[alert <span class="string">addAction:</span>action1];</div></pre></td></tr></table></figure>
<h3 id="向UIAlertController中添加TextField-编辑栏"><a href="#向UIAlertController中添加TextField-编辑栏" class="headerlink" title="向UIAlertController中添加TextField(编辑栏)"></a>向UIAlertController中添加TextField(编辑栏)</h3><p><img src="http://note.youdao.com/yws/api/personal/file/WEB567f88dbbb22a416c09d7315f72214ee?method=download&amp;inline=true&amp;shareKey=924981244c600ae6dde387445646bb7f" alt="添加TextField"></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//configurationHandler 配置函数块，在这里设置编辑框和自定义设置</span></div><div class="line">- (<span class="keyword">void</span>)addTextFieldWithConfigurationHandler:(<span class="keyword">void</span> (^ __<span class="keyword">nullable</span>)(<span class="built_in">UITextField</span> *textField))configurationHandler;</div><div class="line"><span class="comment">//示例</span></div><div class="line">[alert addTextFieldWithConfigurationHandler:^(<span class="built_in">UITextField</span> * _Nonnull textField) &#123;</div><div class="line">textField.placeholder = <span class="string">@"简洁的任务描述"</span>;</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h2 id="UIAlertController的坑点"><a href="#UIAlertController的坑点" class="headerlink" title="UIAlertController的坑点"></a>UIAlertController的坑点</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[UML核心元素——用例]]></title>
      <url>https://liujingh.github.io/2016/09/14/UML/UML%E6%A0%B8%E5%BF%83%E5%85%83%E7%B4%A0%E2%80%94%E2%80%94%E7%94%A8%E4%BE%8B/</url>
      <content type="html"><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>用例定义了一组用例实例，其中每个实例都是系统所执行的系列操作，这些操作生成特定主角可以观测的值。</p>
<p>做一件事情可以有很多不同的办法和步骤，也可能会遇到各种各样的意外情况，因此这件事情是由很多不同情况的集合构成的。在UML中称为用例场景。一个场景就是一个用例的实例。</p>
<p>一个完整的用例定义有参与者、前置条件、场景、后置场景。</p>
<p><img src="http://note.youdao.com/yws/api/personal/file/WEB9824b86267784cc123fa9318ae66051e?method=download&amp;inline=true&amp;shareKey=b752ea537c0cfc990b24a3fc8e916e13" alt="image"></p>
<p>一个系统的功能性是由一些对系统有愿望的参与者要做的一些事情构成的，事情完成后就达成了参与者的一个愿望，当全部参与者的所有愿望都能够通过用例来达到，那么这个系统就被确定下来了。</p>
<h1 id="用例的特征"><a href="#用例的特征" class="headerlink" title="用例的特征"></a>用例的特征</h1><ul>
<li><p>用例是相对独立的</p>
<p>  用例不需要与其他用例交互而独自完成参与者的目的。用例从“功能”上说是完备的。用例本质体现了系统参与者的愿望，不能完整达到参与者愿望的不能称为用例。</p>
</li>
<li><p>用例的执行结果对参与者来说是可观测的和有意义的。</p>
</li>
<li><p>这件必须有一个参与者发起。不存在没有参与者的用例，用例不应该自动启动，也不应该主动启动另一个用例。</p>
</li>
<li><p>用例必然是以动宾短语形式出现的</p>
</li>
<li><p>一个用例就是一个需求单元，分析单元，设计单元</p>
</li>
</ul>
<h1 id="用例的粒度"><a href="#用例的粒度" class="headerlink" title="用例的粒度"></a>用例的粒度</h1><p>在业务建模阶段，用例的粒度以每个用例能够说明一件完整的事情为宜，即一个用例可以描述一项完整的业务流程。这将有助于明确需求范围。</p>
<p>在用例分析阶段，即概念建模阶段，用例的粒度以每个用例能描述一个完整的事件流为宜。</p>
<p>在系统建模阶段，用例视角是针对计算机的，因此用例的粒度以一个用例能够描述操作者与计算机的一次完整交互为宜。</p>
<p>在RUP中，项目计划要依据系统模型编写，因此另一个可参考的粒度是一个用例的开发工作量在一周左右为宜。</p>
<p>用例粒度的划分依据（尤其是业务用例）最标准的方法是以该用例是否完成了参与者的某个完整目的为依据的。</p>
<p>用例的粒度大小不是从用例包含的步骤的多少来判断。</p>
<p>一般来说，一个系统的业务用例定义在多于10个，少于50个之间，否则就应考虑一下粒度选择是否适合了。</p>
<p>粒度选择的问题本质上是因为边界认定不同而产生的。</p>
<h1 id="用例的获得"><a href="#用例的获得" class="headerlink" title="用例的获得"></a>用例的获得</h1><p>不要指望客户和你一样对什么是用例了如指掌，也不要期望客户能有条有理分层次地把他对系统的期望表达出来</p>
<p>通过以下问题引导客户</p>
<ul>
<li>您对系统有什么期望</li>
<li>您打算在这个系统里做些什么事情</li>
<li>您做这件事情的目的是什么</li>
<li>您做完这件事希望有一个什么样的结果</li>
</ul>
<p>不同主角的目标可能会相互重叠，呈现一种交集的状态。是否这些主角所谈的都只是某个完整目标的一个部分？如果这样，应当合并成一个用例，并假定这两个主角在这个用例中只是担任业务工人的角色而不知真正的主角。或者这些主角所谈的是有交叉的部分，但的确是两个不同的目标。如果这样，应当就是两个用例。</p>
<p>提取公共的业务单元</p>
<ul>
<li>一个明确的有效的目标才是一个用例的来源</li>
<li>一个真实的目标应当完备地表达主角的期望</li>
<li>一个有效的目标应当在系统边界内，有主角发动，并具有明确的后果</li>
</ul>
<p>建立业务模型遇到困难和矛盾</p>
<ul>
<li>调整系统边界和主角</li>
<li>扩大或缩小系统边界</li>
<li>变更主角</li>
<li>重新开始</li>
</ul>
<h1 id="用例和功能的误区"><a href="#用例和功能的误区" class="headerlink" title="用例和功能的误区"></a>用例和功能的误区</h1><p>错误：认为用例就是功能的划分和描述</p>
<p>功能是计算机术语，它是用来描述计算机的，而非定义需求的术语。功能实际的描述是：输入 -&gt; 计算 -&gt; 输出 是典型的面向过程分析模型。用例是面向对象的。</p>
<p>描述一个事物：</p>
<ul>
<li>这个事物是什么？</li>
<li>这个事物能做什么？</li>
<li>人们能够用这个事物做什么？</li>
</ul>
<p>结构性观点：即事物的客观存在。但是这个观点不能够说明事物的作用，也就是功能性方面的信息。</p>
<p>功能性观点：说明事物可利用的价值。但是这个观点不能够说明事物在某种情形下的真正价值。</p>
<p>使用者观点：说明事物对于使用者的意义，以及使用者可以怎么使用它，得到什么样的利益。这种观点不能够说明事物的结构。</p>
<p>对于创造一种还不存在的事物，最好的方式就是从使用者的观点出发，描述希望这个事物使用者能用它做什么，能获得什么。</p>
<p>从使用者观点出发来描述软件，至于功能性观点和结构性观点，则可以通过使用者观点推导出来。</p>
<p>使用者观点实际上就是用例的观点。一个用例是一个参与者如何使用系统，获得设么结果的一个集合，通过分析用例，得出结构性的和功能性的内容，最终实现用例，也就实现了使用者的观点。</p>
<p>总结：</p>
<ul>
<li>功能是脱离使用者的愿望而存在的。</li>
<li>功能是孤立的。给一个输入，通过计算就有一个固定的输出。用例是系统的，它 需要描述谁在什么情况下通过什么方式得到什么结果。</li>
<li>如果非要从功能的角度解释用例，那么用例可以解释为一系列完成一个特定目标的“功能”组合，针对不同的场景，这些“功能”体现不同的组合方式。（UML是没有功能这一术语）</li>
</ul>
<h1 id="目标和步骤的误区"><a href="#目标和步骤的误区" class="headerlink" title="目标和步骤的误区"></a>目标和步骤的误区</h1><p>误区：混淆目标和完成目标的步骤。</p>
<p>一个用例是参与者对目标系统的一个愿望，一个完整的实践。为了完成这个事件需要经由很多步骤，但这些步骤不能够完整地反映参与者的目标，不能够作为用例。</p>
<p>在概念模型阶段，在对需求进行分析的时候，用例的边界已经被打破，有了用例的上下文环境，这时步骤也可以作为用例。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[UML·关系]]></title>
      <url>https://liujingh.github.io/2016/08/08/UML/UML%C2%B7%E5%85%B3%E7%B3%BB/</url>
      <content type="html"><![CDATA[<h1 id="关联关系"><a href="#关联关系" class="headerlink" title="关联关系"></a>关联关系</h1><p><img src="http://note.youdao.com/yws/api/personal/file/WEB8f5e2d39186628e68f53bf0514b62007?method=download&amp;inline=true&amp;shareKey=9c17c0c8d0f700dbce25a66581d9ee65" alt="image"></p>
<p>关联关系是一种静态关系，通常与运行状态无关，而是有“常识”、“规则”、“法律”等因素决定的，所以关联关系是一种“强关联”的关系。</p>
<p>关联关系一般不强调关联的方向，在默认情况下，表示关联双方相互“知道”。如果特别强调了关联方向，如上图，在用例模型中，表示参与者A“知道”用例“B”，但用例“B”不知道参与者“A” 。</p>
<h1 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h1><p><img src="http://note.youdao.com/yws/api/personal/file/WEB6448b9b637f701214d787c493e6deb0b?method=download&amp;inline=true&amp;shareKey=9c17c0c8d0f700dbce25a66581d9ee65" alt="image"></p>
<p>依赖关系描述一个对象在运行期会使用到另一个对象的关系。与关联关系不同的是，依赖关系一种临时性的“弱”关系，它不是天然存在的，并且随着运行场景的不同，依赖关系也可能发生变化。</p>
<p>依赖关系和关联关系的区别：在关联关系中，B修改了之后，A不会发生变化。在依赖关系中，A不仅“知道”B的存在，还会使用到B的属性和方法，所以B修改了之后，可能会导致A发生修改。</p>
<p>依赖关系也有单向和双向依赖，但我们应当杜绝双向依赖关系的产生。</p>
<h1 id="扩展关系"><a href="#扩展关系" class="headerlink" title="扩展关系"></a>扩展关系</h1><p><img src="http://note.youdao.com/yws/api/personal/file/WEB8b1b98bdcf60858a01a86ffc7f472f61?method=download&amp;inline=true&amp;shareKey=9c17c0c8d0f700dbce25a66581d9ee65" alt="image"></p>
<p>扩展关系特别用于在用例模型中说明向基本用例中的某个扩展点插入扩展用例。扩展用例是带有抽象性质的，它表示了用例场景中的某个“支流”，有特定的扩展点触发而被启动。</p>
<p>使用扩展关系可能基于以下理由：</p>
<ul>
<li>表明用例的某一部分是可选（或可能可选）的系统行为。这样就可以将模型中的可选行为和必选行为分开。</li>
<li>表明只在特定条件（有时是例外条件）下猜执行分支流，如触发警报</li>
<li>表明可能有一组行为段，其中的一个或多个段可以在基本用例的扩展点处插入。所插入的行为段（以及插入的顺序）将取决于在执行基本用例时与主角的交互。</li>
<li>表明多个基本用例中都有可能触发一个可选的分支流。这个意义上说，扩展用例也代表了多个用例的可复用部分。</li>
</ul>
<h1 id="包含关系"><a href="#包含关系" class="headerlink" title="包含关系"></a>包含关系</h1><p><img src="http://note.youdao.com/yws/api/personal/file/WEBc302e93b10c73ea7b8d5ef0e252e948a?method=download&amp;inline=true&amp;shareKey=9c17c0c8d0f700dbce25a66581d9ee65" alt="image"></p>
<p>包含关系特别用于用例模型，说明在执行基本用例的用例实例过程中插入的行为段。包含用例总是带有抽象性质的，基本用例可控制与包含用例的关系，并可依赖于执行包含用例的结果，但基本用例和包含用例都不能访问对方的属性。</p>
<p>在建模过程中使用包含关系可以基于以下理由：</p>
<ul>
<li>从基本用例中分解出这样的行为：它对于了解基本用例的主要目的并不是必需的，只要它的结果才比较重要。</li>
<li>分解出两个或更多个用例所共有的行为。</li>
</ul>
<p>包含关系和扩展关系的区别：包含关系表示是“必需”的，如果没有包含用例，基本用例是不完整的，同时如果没有基本用例，包含用例是不能单独存在的；扩展关系表示是“可选”的，如果没有扩展用例，基本用例也是完整的；如果没有基本用例，扩展用例是不能单独存在的；如果有多个扩展用例，同一时间用例实例也只会使用其中的一个。</p>
<h1 id="实现关系"><a href="#实现关系" class="headerlink" title="实现关系"></a>实现关系</h1><p><img src="http://note.youdao.com/yws/api/personal/file/WEBeda5757d3bd8ca4078237f993d54507e?method=download&amp;inline=true&amp;shareKey=9c17c0c8d0f700dbce25a66581d9ee65" alt="image"></p>
<p>实现关系特别用于在用例模型中连接用例和用例的实现，说明基本用例的一个实现方式。基本用例描述了一个业务目标，但是该业务目标有多种可能的实现途径，每一种实现途径可以用用例实现（或称用例实例）来表示，而用例实现与基本用例之间就构成了实现关系。即每个实现实例都能实现业务目标。</p>
<h1 id="精化关系"><a href="#精化关系" class="headerlink" title="精化关系"></a>精化关系</h1><p><img src="http://note.youdao.com/yws/api/personal/file/WEB70ef110d350e92a8fa4ad820815e1b2c?method=download&amp;inline=true&amp;shareKey=9c17c0c8d0f700dbce25a66581d9ee65" alt="image"></p>
<p>精化关系特别用于用例模型，一个基本用例可以分解出许多更小的关键精化用例，这些更小的精化用例更细致地展示了基本用例的核心业务。精化关系也可以用于模型与模型之间，表示某个模型是通过另一个模型而得来的。</p>
<h1 id="泛化关系"><a href="#泛化关系" class="headerlink" title="泛化关系"></a>泛化关系</h1><p><img src="http://note.youdao.com/yws/api/personal/file/WEBdb5c8205fb0cd06d27e2ba2fcb477f36?method=download&amp;inline=true&amp;shareKey=9c17c0c8d0f700dbce25a66581d9ee65" alt="image"></p>
<p>泛化关系表示一个类对另一个类的继承，即两个对象之间的继承关系。虽然在UML认识用例之间使用泛化关系是合法的，但并不赞同这样使用，因为很难描述子用例继承了基本用例的什么，过程还是业务实体，其次用例之间的可复用部分和可扩展部分可以使用包含关系和扩展关系描述。</p>
<p>泛化关系和精化关系的区别：</p>
<ul>
<li>精化关系表示有基本对象可以分解为更明确、更精细的子对象，这些子对象并没有增加、减少、改变基本对象那个的行为和属性，仅仅是更加细致和明确化了。在泛化关系中，基本对象被泛化称为子对象后，子对象继承了基本对象的所有特征，并且子对象可以增加、改变基本对象的行为和属性。</li>
<li>精化关系仅仅用于建模阶段，在实现语言中是没有精化这一语义的。泛化则等同于实现语言中的继承语义。</li>
</ul>
<h1 id="聚合关系"><a href="#聚合关系" class="headerlink" title="聚合关系"></a>聚合关系</h1><p><img src="http://note.youdao.com/yws/api/personal/file/WEBf9c0340c85476c58b331b13b57ef51ff?method=download&amp;inline=true&amp;shareKey=9c17c0c8d0f700dbce25a66581d9ee65" alt="image"></p>
<p>聚合关系用于类图，特别用于表示实体对象之间的关系，表达整体由部分构成的语义。</p>
<h1 id="组合关系"><a href="#组合关系" class="headerlink" title="组合关系"></a>组合关系</h1><p><img src="http://note.youdao.com/yws/api/personal/file/WEB054a4667f1b44a48cc7eb621d02acf92?method=download&amp;inline=true&amp;shareKey=9c17c0c8d0f700dbce25a66581d9ee65" alt="image"></p>
<p>组合关系用于类图，特别用于表示实体对象关系，表达整体部分的语义。</p>
<p>组合关系和聚合关系的区别：</p>
<ul>
<li>组合是一个种强依赖的特殊聚合关系，如果整体不存在了，则部分也将消亡。</li>
<li>在聚合关系中，整体和部分不是强依赖，即使整体不存在了，部分仍然存在。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[统一过程（RUP）]]></title>
      <url>https://liujingh.github.io/2016/08/06/UML/%E7%BB%9F%E4%B8%80%E8%BF%87%E7%A8%8B%EF%BC%88RUP%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="统一过程（RUP）的简介"><a href="#统一过程（RUP）的简介" class="headerlink" title="统一过程（RUP）的简介"></a>统一过程（RUP）的简介</h1><p>统一过程（以下简称RUP）归纳和整理了很多在实践中总结出来的软件工程的最佳实践，是一个采用了面向对象思想，使用UML作为软件分析设计语言，并且结合了项目管理、质量保证等许多软件工程知识综合而成的一个非常完整和庞大的软件方法。</p>
<p>统一过程定义了软件开发过程中最重要的四个阶段和九个核心工作流：</p>
<p><img src="http://note.youdao.com/yws/api/personal/file/WEBba19abf4ba9b13a180e4ff6c0e5c4d03?method=download&amp;inline=true&amp;shareKey=b752ea537c0cfc990b24a3fc8e916e13" alt="image"></p>
<p>一个软件从开始到产品推出要经过多次的演进，每一个演进会有一个迭代计划来描述这次演进要达到的目标、要经历的阶段以及要进行的工作流。统一过程对每一个工作流都规定了标准的流程、参与角色和工件模板，而在迭代计划里可以依据实际情况对这些流程、角色和模板进行裁剪。</p>
<h1 id="RUP和UML"><a href="#RUP和UML" class="headerlink" title="RUP和UML"></a>RUP和UML</h1><p>UML是一种语言，用来描述软件生产过程中要产生的文档；RUP则是指导如何产生这些文档以及这些文档要讲述什么的方法。</p>
<p><img src="http://note.youdao.com/yws/api/personal/file/WEB9a480f8a1dcd5bb790a8036ac20c385d?method=download&amp;inline=true&amp;shareKey=451042a8f768a3a31414c72a34d72df0" alt="image"></p>
<p>学习UML之前，应当先系统学习软件过程。只有掌握了软件过程，才会知道为什么要有用例，为什么要有分析模型；站在软件过程的立场，那些孤独的UML视图才会变得有生命力，才会知道在什么时候，在什么地方需要用什么样的UML图符来表达软件的观点，也才会知道UML的那些视图到底在软件开发过程里起到什么作用。</p>
<h1 id="RUP和XP（极限编程）方法"><a href="#RUP和XP（极限编程）方法" class="headerlink" title="RUP和XP（极限编程）方法"></a>RUP和XP（极限编程）方法</h1><p>RUP是一种追求稳定的重量型软件方法，它追求开发稳定架构，控制变更，立足于长期战略，适用于指导大中型软件产品的开发。但实施RUP难度大，成本高，也不能快速适应需求的变化。</p>
<p>XP是一种追求在变化中用最快速的办法适应变更，用小的管理成本保障软件质量的轻量型敏捷方法。</p>
<p>在中大型软件产品的开发过程中，对整体软件设计往往会使用到RUP，在具体到细化功能设计往往会结合XP方法一起开发。</p>
<h1 id="RUP和构件式开发"><a href="#RUP和构件式开发" class="headerlink" title="RUP和构件式开发"></a>RUP和构件式开发</h1><p>构件式开发：软件开发能够像其他工业产品一样，可以单独生产标准零部件，然后按照要求来组装它们，用较少的投入完成最终的软件产品。是一种基于架构的软件开发模式。</p>
<p>构件式开发的困难：一方面：构件的难以精确抽象，其次还要求构件有“自适应”和“自我成长”的能力。另一方面：软件构件的组装（接口+标准）也难以标准化实现。</p>
<p>RUP是目前为止最全面、最广泛、最综合的软件体系。RUP也是最有可能实现构件式开发的软件过程。</p>
<p><img src="http://note.youdao.com/yws/api/personal/file/WEB5ae3d93d624058dde51e9e9d7b9fa145?method=download&amp;inline=true&amp;shareKey=b752ea537c0cfc990b24a3fc8e916e13" alt="image"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[建模基础]]></title>
      <url>https://liujingh.github.io/2016/08/06/UML/%E5%BB%BA%E6%A8%A1%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<h1 id="建模"><a href="#建模" class="headerlink" title="建模"></a>建模</h1><p>建模，是指通过对客观事物建立一种抽象的方法用以表征事物并获得对事物本身的理解，同时把这种理解概念化，将这些逻辑概念组织起来，构成一种对所观察的对象的内部结构和工作原理的便于理解的表达。</p>
<h2 id="怎么建："><a href="#怎么建：" class="headerlink" title="怎么建："></a>怎么建：</h2><p>快速的小测试：在30秒内说出尽可能多的筷子、勺子和盘子的相同点和不同点</p>
<ul>
<li>站在用途的角度：都是餐具，筷子是用夹的，勺子是用舀的，盘子是用于盛的</li>
<li>站在使用的角度：都需要用手拿，不同的是手的动作不同</li>
<li>站在字面的角度：都有一个子字…</li>
</ul>
<p>当为现实世界建模时，首先要决定的是抽象的角度，即建立这个模型的目的是什么。</p>
<p>面对问题领域的时候首先不要决定去通盘考虑，而是找出问题领域里面包含的抽象角度。如果把抽象角度都找全了，并且这些角度都分析清楚了，问题领域也就解决了。这就是用例。</p>
<h2 id="模是什么："><a href="#模是什么：" class="headerlink" title="模是什么："></a>模是什么：</h2><p>决定了抽象角度，就决定了一个目标。模就是能够满足这一目标的事物。换个概念便是：人、事、物和规则。</p>
<p><img src="http://note.youdao.com/yws/api/personal/file/WEBb6c08d7293abb332ada4031430ab115a?method=download&amp;inline=true&amp;shareKey=b752ea537c0cfc990b24a3fc8e916e13" alt="image"></p>
<h1 id="用例驱动"><a href="#用例驱动" class="headerlink" title="用例驱动"></a>用例驱动</h1><p>用例驱动的原理：要解决问题领域就要归纳出所有必要的抽象角度（用例），为这些用例描述出可能的特定场景，并找到实现这些场景的事物、规则和行为。如果我们找到的那些事物、规则和行为实现了所有必要的用例，那么问题领域就解决了。</p>
<p>在实际的软件项目中，一个软件要实现的功能通过用例来捕获，接下来的所有分析、设计、实现、测试都由用例来驱动，即以实现用例为目标</p>
<p>在统一过程中，用例可以驱动的内容：</p>
<p><img src="http://note.youdao.com/yws/api/personal/file/WEBdc23d269743d16f1365e7e959d93a4c3?method=download&amp;inline=true&amp;shareKey=b752ea537c0cfc990b24a3fc8e916e13" alt="image"></p>
<p>逻辑视图：说明关键的用例实现、子系统、包和类，包含在构架方面具有重要意义的行为。“人”、“事”、“物”、“规则”是如何分类组织的。</p>
<p>进程视图：说明系统中进程的详细组织结构，其中包括类和子系统到进程和线程的映射。“人”、“事”、“物”、“规则”是如何交互的，他们的关系如何。</p>
<p>部署视图：说明处理活动在系统中各节点的分布，包括进程和线程的物理分布。“人”、“事”、“物”、“规则”是如何部署在物理节点（主机、网络环境）上的。</p>
<p>实施视图：获取为实施制定的架构决策。<br>内容：</p>
<ul>
<li>列举实施模型中的所有子系统</li>
<li>描述子系统如何组织为层次和分层结构的构件图</li>
<li>描述子系统间的导入依赖关系的图解<br>作用：</li>
<li>为个人、团队或分包商分配实施工作</li>
<li>估算要开发、修改或删除的代码数量</li>
<li>阐明大规模复用的理由</li>
<li>考虑发布策略</li>
</ul>
<p>“人”、“事”、“物”、“规则”如何构成系统的“零部件”，以及我们如何组织人力生产和组装这些“零部件”以建成最终系统</p>
<h1 id="抽象层次"><a href="#抽象层次" class="headerlink" title="抽象层次"></a>抽象层次</h1><p>误解：越抽象的东西越难理解，越具体的东西越容易认识！<br>人们认识的事物概念都是抽象的，具象只是一个相对的概念。例如，石头是硬的这个普遍认识也是一种抽象的，之所以人们觉得硬度这个抽象概念容易理解，是因为经过了多年的积累，这个抽象的概念已经被消化了。<br>所谓的具体也是一种抽象，一种已经被你接受和理解的抽象。<br>抽象层次越高，被屏蔽的信息也就越多，信息量越少，也就越容易理解和处理。如果抽象层次太高，信息量太少，又会因为信息量不足而实施不了。用例粒度选择的困难本质上是由于没有找到抽象层次而产生的。</p>
<p>抽象的方法：</p>
<ul>
<li>自顶向下：适用于让人们从头开始认识一个事物</li>
<li>自底向上：适用于在实践中改进和提高认识</li>
</ul>
<p>在软件开发过程中，主体上应当选择自顶向下的方法，用少量的概念覆盖系统需求，在逐渐降低抽象层次，直到代码编写。辅以自底向上的方法，通过总结在较低抽象层次的实践经验来改进较高层次的概念以提升软件质量。</p>
<h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><p>建立模型的目的是想相关的人（干系人）展示将要生产的软件产品，软件产品有着很多不同的方面。只有把这些方面都描述清楚，用很多不同的视图去展示软件这些不同的方面——静态的、动态的、结构性的、逻辑性的等——才能够说明建立了一个完整的模型。</p>
<p>建模最主要的工作就是为软件绘制那些表达软件含义的视图来完整地表达软件的含义。</p>
<ul>
<li>问题一：应该为哪些软件信息绘制哪些视图？</li>
<li>问题二：应该给哪些干系人展示哪些视角？</li>
</ul>
<h1 id="对象分析方法"><a href="#对象分析方法" class="headerlink" title="对象分析方法"></a>对象分析方法</h1><p>一切都是对象：一切有名字的东西都是对象，都应当使用对象的观点看待它，分析它。哪怕是一个业务流程。</p>
<h2 id="对象都是独立的"><a href="#对象都是独立的" class="headerlink" title="对象都是独立的"></a>对象都是独立的</h2><p>对象与对象之间是天然独立，只是在某个特定的场景下，它们的某一个特定的实例才相互联系在一起。</p>
<p>对象是离散的，它不是因为特定场景而存在。场景中的对象只是对象“映射”到该场景中的一个侧面，称之为对象实例。通过一个场景，仅能得到对象的一个侧面的信息。</p>
<p>对象的分析方法：分析很多个该对象的实例所参与的场景，以获得独享的多个侧面，再通过归纳整理这些对象的多个实例，抽象出对象的一般特性。<br>对象的独立性带来的正是对象的可抽象能力和可扩展能力。</p>
<h2 id="对象都具有原子性"><a href="#对象都具有原子性" class="headerlink" title="对象都具有原子性"></a>对象都具有原子性</h2><p>同一个抽象层次上，在分析过程中都应当将对象视为一个不可分割的原子，它与其它对象交互时就是一个整体。原子性是抽象层次有意义的重要保证，一旦破坏了原子性，则表示在同一抽象层次上的对象不具备同样的粒度，这使得分析工作陷入混乱。</p>
<p>面向接口编程：将分析过程中得到的所有对于对象的认识附加在对象边界上，在实现这个对象之前不理会其内部的细节。</p>
<h2 id="对象都是可抽象的"><a href="#对象都是可抽象的" class="headerlink" title="对象都是可抽象的"></a>对象都是可抽象的</h2><p>对象参与一个场景时会展现某一个方面。总可以将对象的某一个方面抽象出来，让其作为对象的一个代表来参与场景交互。通常这种抽象总是会以接口来命名。<br>在分析过程中，应当关注那些参与了很多场景的对象，它们往往是分析设计中的重点以及成败关键。</p>
<h2 id="对象都有层次性"><a href="#对象都有层次性" class="headerlink" title="对象都有层次性"></a>对象都有层次性</h2><p>层次越高，其描述越粗略但适应能力越广；层次越低则描述越精确但适应能力越下降。</p>
<p>在分析过程中，应当根据问题领域的复杂程度设定多个抽象层次，在每个层次上使用适合的抽象程度的对象描述。</p>
<h2 id="对象分析方法总结"><a href="#对象分析方法总结" class="headerlink" title="对象分析方法总结"></a>对象分析方法总结</h2><p>独立性、原子性、抽象性和层次性是面向对象分析时应当遵循的一些原则和方法。</p>
<p><img src="http://note.youdao.com/yws/api/personal/file/WEBe6c0cf7ff58bf56f3cddf79132595e63?method=download&amp;inline=true&amp;shareKey=b752ea537c0cfc990b24a3fc8e916e13" alt="image"></p>
]]></content>
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[分类]]></title>
      <url>https://liujingh.github.io/categories/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[tags]]></title>
      <url>https://liujingh.github.io/tags/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
